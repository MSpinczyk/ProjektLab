
ProjektLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f28  08006f28  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006f28  08006f28  00016f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f30  08006f30  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000078  08006fb0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08006fb0  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e12  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ee  00000000  00000000  00033eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  000365a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00037650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fb6  00000000  00000000  00038610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a2f  00000000  00000000  000515c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dc5b  00000000  00000000  00063ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101c50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f88  00000000  00000000  00101ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e20 	.word	0x08006e20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006e20 	.word	0x08006e20

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b96e 	b.w	8000df0 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468c      	mov	ip, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8083 	bne.w	8000c42 <__udivmoddi4+0x116>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d947      	bls.n	8000bd2 <__udivmoddi4+0xa6>
 8000b42:	fab2 f282 	clz	r2, r2
 8000b46:	b142      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	f1c2 0020 	rsb	r0, r2, #32
 8000b4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b50:	4091      	lsls	r1, r2
 8000b52:	4097      	lsls	r7, r2
 8000b54:	ea40 0c01 	orr.w	ip, r0, r1
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbbc f6f8 	udiv	r6, ip, r8
 8000b64:	fa1f fe87 	uxth.w	lr, r7
 8000b68:	fb08 c116 	mls	r1, r8, r6, ip
 8000b6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b70:	fb06 f10e 	mul.w	r1, r6, lr
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b7e:	f080 8119 	bcs.w	8000db4 <__udivmoddi4+0x288>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8116 	bls.w	8000db4 <__udivmoddi4+0x288>
 8000b88:	3e02      	subs	r6, #2
 8000b8a:	443b      	add	r3, r7
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b94:	fb08 3310 	mls	r3, r8, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	45a6      	cmp	lr, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	193c      	adds	r4, r7, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8105 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000bae:	45a6      	cmp	lr, r4
 8000bb0:	f240 8102 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	443c      	add	r4, r7
 8000bb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bbc:	eba4 040e 	sub.w	r4, r4, lr
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	b11d      	cbz	r5, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bcc:	4631      	mov	r1, r6
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	b902      	cbnz	r2, 8000bd6 <__udivmoddi4+0xaa>
 8000bd4:	deff      	udf	#255	; 0xff
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d150      	bne.n	8000c80 <__udivmoddi4+0x154>
 8000bde:	1bcb      	subs	r3, r1, r7
 8000be0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be4:	fa1f f887 	uxth.w	r8, r7
 8000be8:	2601      	movs	r6, #1
 8000bea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bee:	0c21      	lsrs	r1, r4, #16
 8000bf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000c00:	1879      	adds	r1, r7, r1
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0xe2>
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	f200 80e9 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1ac9      	subs	r1, r1, r3
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x10c>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x10a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80d9 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e7bf      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x12e>
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	f000 80b1 	beq.w	8000dae <__udivmoddi4+0x282>
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c52:	4630      	mov	r0, r6
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f683 	clz	r6, r3
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d14a      	bne.n	8000cf8 <__udivmoddi4+0x1cc>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0x140>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80b8 	bhi.w	8000ddc <__udivmoddi4+0x2b0>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	468c      	mov	ip, r1
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d0a8      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c80:	f1c2 0320 	rsb	r3, r2, #32
 8000c84:	fa20 f603 	lsr.w	r6, r0, r3
 8000c88:	4097      	lsls	r7, r2
 8000c8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c92:	40d9      	lsrs	r1, r3
 8000c94:	4330      	orrs	r0, r6
 8000c96:	0c03      	lsrs	r3, r0, #16
 8000c98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c9c:	fa1f f887 	uxth.w	r8, r7
 8000ca0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb06 f108 	mul.w	r1, r6, r8
 8000cac:	4299      	cmp	r1, r3
 8000cae:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x19c>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cba:	f080 808d 	bcs.w	8000dd8 <__udivmoddi4+0x2ac>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 808a 	bls.w	8000dd8 <__udivmoddi4+0x2ac>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b281      	uxth	r1, r0
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd8:	fb00 f308 	mul.w	r3, r0, r8
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x1c4>
 8000ce0:	1879      	adds	r1, r7, r1
 8000ce2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ce6:	d273      	bcs.n	8000dd0 <__udivmoddi4+0x2a4>
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d971      	bls.n	8000dd0 <__udivmoddi4+0x2a4>
 8000cec:	3802      	subs	r0, #2
 8000cee:	4439      	add	r1, r7
 8000cf0:	1acb      	subs	r3, r1, r3
 8000cf2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cf6:	e778      	b.n	8000bea <__udivmoddi4+0xbe>
 8000cf8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cfc:	fa03 f406 	lsl.w	r4, r3, r6
 8000d00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d04:	431c      	orrs	r4, r3
 8000d06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d16:	431f      	orrs	r7, r3
 8000d18:	0c3b      	lsrs	r3, r7, #16
 8000d1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1e:	fa1f f884 	uxth.w	r8, r4
 8000d22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d2e:	458a      	cmp	sl, r1
 8000d30:	fa02 f206 	lsl.w	r2, r2, r6
 8000d34:	fa00 f306 	lsl.w	r3, r0, r6
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x220>
 8000d3a:	1861      	adds	r1, r4, r1
 8000d3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d40:	d248      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d42:	458a      	cmp	sl, r1
 8000d44:	d946      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4421      	add	r1, r4
 8000d4c:	eba1 010a 	sub.w	r1, r1, sl
 8000d50:	b2bf      	uxth	r7, r7
 8000d52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d5e:	fb00 f808 	mul.w	r8, r0, r8
 8000d62:	45b8      	cmp	r8, r7
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x24a>
 8000d66:	19e7      	adds	r7, r4, r7
 8000d68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6c:	d22e      	bcs.n	8000dcc <__udivmoddi4+0x2a0>
 8000d6e:	45b8      	cmp	r8, r7
 8000d70:	d92c      	bls.n	8000dcc <__udivmoddi4+0x2a0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4427      	add	r7, r4
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	eba7 0708 	sub.w	r7, r7, r8
 8000d7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d82:	454f      	cmp	r7, r9
 8000d84:	46c6      	mov	lr, r8
 8000d86:	4649      	mov	r1, r9
 8000d88:	d31a      	bcc.n	8000dc0 <__udivmoddi4+0x294>
 8000d8a:	d017      	beq.n	8000dbc <__udivmoddi4+0x290>
 8000d8c:	b15d      	cbz	r5, 8000da6 <__udivmoddi4+0x27a>
 8000d8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d92:	eb67 0701 	sbc.w	r7, r7, r1
 8000d96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d9a:	40f2      	lsrs	r2, r6
 8000d9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000da0:	40f7      	lsrs	r7, r6
 8000da2:	e9c5 2700 	strd	r2, r7, [r5]
 8000da6:	2600      	movs	r6, #0
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e70b      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0x60>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6fd      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dbc:	4543      	cmp	r3, r8
 8000dbe:	d2e5      	bcs.n	8000d8c <__udivmoddi4+0x260>
 8000dc0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dc4:	eb69 0104 	sbc.w	r1, r9, r4
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7df      	b.n	8000d8c <__udivmoddi4+0x260>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e7d2      	b.n	8000d76 <__udivmoddi4+0x24a>
 8000dd0:	4660      	mov	r0, ip
 8000dd2:	e78d      	b.n	8000cf0 <__udivmoddi4+0x1c4>
 8000dd4:	4681      	mov	r9, r0
 8000dd6:	e7b9      	b.n	8000d4c <__udivmoddi4+0x220>
 8000dd8:	4666      	mov	r6, ip
 8000dda:	e775      	b.n	8000cc8 <__udivmoddi4+0x19c>
 8000ddc:	4630      	mov	r0, r6
 8000dde:	e74a      	b.n	8000c76 <__udivmoddi4+0x14a>
 8000de0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de4:	4439      	add	r1, r7
 8000de6:	e713      	b.n	8000c10 <__udivmoddi4+0xe4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	443c      	add	r4, r7
 8000dec:	e724      	b.n	8000c38 <__udivmoddi4+0x10c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <SPIRead>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint16_t SPITx[10];
uint16_t SPIRx[10];
uint8_t SPIRead( uint8_t Address ) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
	SPITx[0] = (0x80 | Address) << 8;
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <SPIRead+0x50>)
 8000e0e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, SPI_NSS_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2110      	movs	r1, #16
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <SPIRead+0x54>)
 8000e16:	f003 f983 	bl	8004120 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, SPITx, SPIRx, 1, 100);
 8000e1a:	2364      	movs	r3, #100	; 0x64
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <SPIRead+0x58>)
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <SPIRead+0x50>)
 8000e24:	480a      	ldr	r0, [pc, #40]	; (8000e50 <SPIRead+0x5c>)
 8000e26:	f003 feaa 	bl	8004b7e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, SPI_NSS_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <SPIRead+0x54>)
 8000e30:	f003 f976 	bl	8004120 <HAL_GPIO_WritePin>
	return( (uint8_t)(SPIRx[0] & 0xFF) );
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SPIRead+0x58>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	b2db      	uxtb	r3, r3
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200002f4 	.word	0x200002f4
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	20000148 	.word	0x20000148
 8000e50:	2000020c 	.word	0x2000020c

08000e54 <SPIWrite>:
void SPIWrite( uint8_t AddressAndAtributes, uint8_t Data  ) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71bb      	strb	r3, [r7, #6]
	SPITx[0] = (AddressAndAtributes << 8) + Data;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	4413      	add	r3, r2
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <SPIWrite+0x50>)
 8000e76:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, SPI_NSS_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <SPIWrite+0x54>)
 8000e7e:	f003 f94f 	bl	8004120 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, SPITx, SPIRx, 1, 100);
 8000e82:	2364      	movs	r3, #100	; 0x64
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	4a08      	ldr	r2, [pc, #32]	; (8000eac <SPIWrite+0x58>)
 8000e8a:	4906      	ldr	r1, [pc, #24]	; (8000ea4 <SPIWrite+0x50>)
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <SPIWrite+0x5c>)
 8000e8e:	f003 fe76 	bl	8004b7e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, SPI_NSS_Pin, GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2110      	movs	r1, #16
 8000e96:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <SPIWrite+0x54>)
 8000e98:	f003 f942 	bl	8004120 <HAL_GPIO_WritePin>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200002f4 	.word	0x200002f4
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	20000148 	.word	0x20000148
 8000eb0:	2000020c 	.word	0x2000020c

08000eb4 <LED>:
		0X39, /* C */
		0X5E, /* D */
		0X79, /* E */
		0X71 /* F */
};
void LED(int ind){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000ec2:	481d      	ldr	r0, [pc, #116]	; (8000f38 <LED+0x84>)
 8000ec4:	f003 f92c 	bl	8004120 <HAL_GPIO_WritePin>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d82f      	bhi.n	8000f30 <LED+0x7c>
 8000ed0:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <LED+0x24>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000eed 	.word	0x08000eed
 8000edc:	08000ef9 	.word	0x08000ef9
 8000ee0:	08000f07 	.word	0x08000f07
 8000ee4:	08000f15 	.word	0x08000f15
 8000ee8:	08000f23 	.word	0x08000f23
	switch(ind){
		case 1:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	4811      	ldr	r0, [pc, #68]	; (8000f38 <LED+0x84>)
 8000ef2:	f003 f915 	bl	8004120 <HAL_GPIO_WritePin>
				break;
 8000ef6:	e01b      	b.n	8000f30 <LED+0x7c>
		case 2:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000efe:	480e      	ldr	r0, [pc, #56]	; (8000f38 <LED+0x84>)
 8000f00:	f003 f90e 	bl	8004120 <HAL_GPIO_WritePin>
				break;
 8000f04:	e014      	b.n	8000f30 <LED+0x7c>
		case 3:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <LED+0x84>)
 8000f0e:	f003 f907 	bl	8004120 <HAL_GPIO_WritePin>
			   	break;
 8000f12:	e00d      	b.n	8000f30 <LED+0x7c>
		case 4:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1a:	4807      	ldr	r0, [pc, #28]	; (8000f38 <LED+0x84>)
 8000f1c:	f003 f900 	bl	8004120 <HAL_GPIO_WritePin>
				break;
 8000f20:	e006      	b.n	8000f30 <LED+0x7c>
		case 5:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <LED+0x84>)
 8000f2a:	f003 f8f9 	bl	8004120 <HAL_GPIO_WritePin>
				break;
 8000f2e:	bf00      	nop
		}
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40020400 	.word	0x40020400

08000f3c <__io_putchar>:
int __io_putchar(int ch) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f44:	1d39      	adds	r1, r7, #4
 8000f46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <__io_putchar+0x20>)
 8000f4e:	f004 fd16 	bl	800597e <HAL_UART_Transmit>
	return ch;
 8000f52:	687b      	ldr	r3, [r7, #4]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200002ac 	.word	0x200002ac

08000f60 <display>:
void display(int num, int ind){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	   HAL_GPIO_WritePin(GPIOC, S7Com4_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f70:	484f      	ldr	r0, [pc, #316]	; (80010b0 <display+0x150>)
 8000f72:	f003 f8d5 	bl	8004120 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, S7Com3_Pin, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7c:	484c      	ldr	r0, [pc, #304]	; (80010b0 <display+0x150>)
 8000f7e:	f003 f8cf 	bl	8004120 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, S7Com2_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f88:	4849      	ldr	r0, [pc, #292]	; (80010b0 <display+0x150>)
 8000f8a:	f003 f8c9 	bl	8004120 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, S7Com1_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f94:	4846      	ldr	r0, [pc, #280]	; (80010b0 <display+0x150>)
 8000f96:	f003 f8c3 	bl	8004120 <HAL_GPIO_WritePin>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d826      	bhi.n	8000ff0 <display+0x90>
 8000fa2:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <display+0x48>)
 8000fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa8:	08000fb9 	.word	0x08000fb9
 8000fac:	08000fc7 	.word	0x08000fc7
 8000fb0:	08000fd5 	.word	0x08000fd5
 8000fb4:	08000fe3 	.word	0x08000fe3
	   switch(ind){
			case 1:
				   HAL_GPIO_WritePin(GPIOC, S7Com1_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fbe:	483c      	ldr	r0, [pc, #240]	; (80010b0 <display+0x150>)
 8000fc0:	f003 f8ae 	bl	8004120 <HAL_GPIO_WritePin>
				   break;
 8000fc4:	e014      	b.n	8000ff0 <display+0x90>
			case 2:
				   HAL_GPIO_WritePin(GPIOC, S7Com2_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fcc:	4838      	ldr	r0, [pc, #224]	; (80010b0 <display+0x150>)
 8000fce:	f003 f8a7 	bl	8004120 <HAL_GPIO_WritePin>
				   break;
 8000fd2:	e00d      	b.n	8000ff0 <display+0x90>
			case 3:
				   HAL_GPIO_WritePin(GPIOC, S7Com3_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fda:	4835      	ldr	r0, [pc, #212]	; (80010b0 <display+0x150>)
 8000fdc:	f003 f8a0 	bl	8004120 <HAL_GPIO_WritePin>
				   break;
 8000fe0:	e006      	b.n	8000ff0 <display+0x90>
			case 4:
				   HAL_GPIO_WritePin(GPIOC, S7Com4_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe8:	4831      	ldr	r0, [pc, #196]	; (80010b0 <display+0x150>)
 8000fea:	f003 f899 	bl	8004120 <HAL_GPIO_WritePin>
				   break;
 8000fee:	bf00      	nop
		}
	   HAL_GPIO_WritePin(GPIOC, S7A_Pin, b7SegmentTable[num] & 1);
 8000ff0:	4a30      	ldr	r2, [pc, #192]	; (80010b4 <display+0x154>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	2140      	movs	r1, #64	; 0x40
 8001004:	482a      	ldr	r0, [pc, #168]	; (80010b0 <display+0x150>)
 8001006:	f003 f88b 	bl	8004120 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, S7B_Pin, b7SegmentTable[num] & 2);
 800100a:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <display+0x154>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	b2db      	uxtb	r3, r3
 800101a:	461a      	mov	r2, r3
 800101c:	2110      	movs	r1, #16
 800101e:	4824      	ldr	r0, [pc, #144]	; (80010b0 <display+0x150>)
 8001020:	f003 f87e 	bl	8004120 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, S7C_Pin, b7SegmentTable[num] & 4);
 8001024:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <display+0x154>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	b2db      	uxtb	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	2108      	movs	r1, #8
 8001038:	481d      	ldr	r0, [pc, #116]	; (80010b0 <display+0x150>)
 800103a:	f003 f871 	bl	8004120 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, S7D_Pin, b7SegmentTable[num] & 8);
 800103e:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <display+0x154>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	2102      	movs	r1, #2
 8001052:	4817      	ldr	r0, [pc, #92]	; (80010b0 <display+0x150>)
 8001054:	f003 f864 	bl	8004120 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, S7E_Pin, b7SegmentTable[num] & 16);
 8001058:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <display+0x154>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	2104      	movs	r1, #4
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <display+0x150>)
 800106e:	f003 f857 	bl	8004120 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, S7F_Pin, b7SegmentTable[num] & 32);
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <display+0x154>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f003 0320 	and.w	r3, r3, #32
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	2120      	movs	r1, #32
 8001086:	480a      	ldr	r0, [pc, #40]	; (80010b0 <display+0x150>)
 8001088:	f003 f84a 	bl	8004120 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, S7G_Pin, b7SegmentTable[num] & 64);
 800108c:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <display+0x154>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	2101      	movs	r1, #1
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <display+0x150>)
 80010a2:	f003 f83d 	bl	8004120 <HAL_GPIO_WritePin>
	}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40020800 	.word	0x40020800
 80010b4:	08006e50 	.word	0x08006e50

080010b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	if ( (htim == &htim1) && (x%3==0) ){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4aa5      	ldr	r2, [pc, #660]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	f040 80c8 	bne.w	800125a <HAL_TIM_PeriodElapsedCallback+0x1a2>
 80010ca:	4ba4      	ldr	r3, [pc, #656]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80010cc:	6819      	ldr	r1, [r3, #0]
 80010ce:	4ba4      	ldr	r3, [pc, #656]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80010d0:	fb83 3201 	smull	r3, r2, r3, r1
 80010d4:	17cb      	asrs	r3, r1, #31
 80010d6:	1ad2      	subs	r2, r2, r3
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	1aca      	subs	r2, r1, r3
 80010e0:	2a00      	cmp	r2, #0
 80010e2:	f040 80ba 	bne.w	800125a <HAL_TIM_PeriodElapsedCallback+0x1a2>
		counter = 0;
 80010e6:	4b9f      	ldr	r3, [pc, #636]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
		 switch (disp) {
 80010ec:	4b9e      	ldr	r3, [pc, #632]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d864      	bhi.n	80011c0 <HAL_TIM_PeriodElapsedCallback+0x108>
 80010f6:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	0800110d 	.word	0x0800110d
 8001100:	08001139 	.word	0x08001139
 8001104:	0800116d 	.word	0x0800116d
 8001108:	080011a3 	.word	0x080011a3
				  case 1:
					  display(ADCRes % 10, 4);
 800110c:	4b97      	ldr	r3, [pc, #604]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800110e:	881a      	ldrh	r2, [r3, #0]
 8001110:	4b97      	ldr	r3, [pc, #604]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001112:	fba3 1302 	umull	r1, r3, r3, r2
 8001116:	08d9      	lsrs	r1, r3, #3
 8001118:	460b      	mov	r3, r1
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	2104      	movs	r1, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff1a 	bl	8000f60 <display>
					  disp++;
 800112c:	4b8e      	ldr	r3, [pc, #568]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	4a8d      	ldr	r2, [pc, #564]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001134:	6013      	str	r3, [r2, #0]
					  break;
 8001136:	e043      	b.n	80011c0 <HAL_TIM_PeriodElapsedCallback+0x108>
				  case 2:
					  display((ADCRes % 100) / 10, 3);
 8001138:	4b8c      	ldr	r3, [pc, #560]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	4a8d      	ldr	r2, [pc, #564]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800113e:	fba2 1203 	umull	r1, r2, r2, r3
 8001142:	0952      	lsrs	r2, r2, #5
 8001144:	2164      	movs	r1, #100	; 0x64
 8001146:	fb01 f202 	mul.w	r2, r1, r2
 800114a:	1a9b      	subs	r3, r3, r2
 800114c:	b29b      	uxth	r3, r3
 800114e:	4a88      	ldr	r2, [pc, #544]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001150:	fba2 2303 	umull	r2, r3, r2, r3
 8001154:	08db      	lsrs	r3, r3, #3
 8001156:	b29b      	uxth	r3, r3
 8001158:	2103      	movs	r1, #3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff00 	bl	8000f60 <display>
					  disp++;
 8001160:	4b81      	ldr	r3, [pc, #516]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	4a80      	ldr	r2, [pc, #512]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001168:	6013      	str	r3, [r2, #0]
					  break;
 800116a:	e029      	b.n	80011c0 <HAL_TIM_PeriodElapsedCallback+0x108>
				  case 3:
					  display((ADCRes % 1000)/100, 2);
 800116c:	4b7f      	ldr	r3, [pc, #508]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	4a81      	ldr	r2, [pc, #516]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001172:	fba2 1203 	umull	r1, r2, r2, r3
 8001176:	0992      	lsrs	r2, r2, #6
 8001178:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800117c:	fb01 f202 	mul.w	r2, r1, r2
 8001180:	1a9b      	subs	r3, r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	4a7b      	ldr	r2, [pc, #492]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	b29b      	uxth	r3, r3
 800118e:	2102      	movs	r1, #2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fee5 	bl	8000f60 <display>
					  disp++;
 8001196:	4b74      	ldr	r3, [pc, #464]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	4a72      	ldr	r2, [pc, #456]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800119e:	6013      	str	r3, [r2, #0]
					  break;
 80011a0:	e00e      	b.n	80011c0 <HAL_TIM_PeriodElapsedCallback+0x108>
				  case 4:
					  display(ADCRes/1000, 1);
 80011a2:	4b72      	ldr	r3, [pc, #456]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	4a74      	ldr	r2, [pc, #464]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	099b      	lsrs	r3, r3, #6
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	2101      	movs	r1, #1
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fed4 	bl	8000f60 <display>
					  disp = 1;
 80011b8:	4b6b      	ldr	r3, [pc, #428]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
					  break;
 80011be:	bf00      	nop
				  }
		TimerCnt++;
 80011c0:	4b6e      	ldr	r3, [pc, #440]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a6d      	ldr	r2, [pc, #436]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80011c8:	6013      	str	r3, [r2, #0]
		if (ADCRes > 2000){
 80011ca:	4b68      	ldr	r3, [pc, #416]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011d2:	d903      	bls.n	80011dc <HAL_TIM_PeriodElapsedCallback+0x124>
			LED(2);
 80011d4:	2002      	movs	r0, #2
 80011d6:	f7ff fe6d 	bl	8000eb4 <LED>
 80011da:	e002      	b.n	80011e2 <HAL_TIM_PeriodElapsedCallback+0x12a>
		}
		else{
			LED(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f7ff fe69 	bl	8000eb4 <LED>
		}

		switch (TimerCnt) {
 80011e2:	4b66      	ldr	r3, [pc, #408]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ea:	f040 825c 	bne.w	80016a6 <HAL_TIM_PeriodElapsedCallback+0x5ee>
			case 1000:
				HAL_ADC_Start(&hadc1);
 80011ee:	4864      	ldr	r0, [pc, #400]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80011f0:	f001 f9f8 	bl	80025e4 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	4861      	ldr	r0, [pc, #388]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80011fa:	f001 faa7 	bl	800274c <HAL_ADC_PollForConversion>
				ADCRes = HAL_ADC_GetValue(&hadc1);                    // 0-4095 == 0-3.3V
 80011fe:	4860      	ldr	r0, [pc, #384]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001200:	f001 fe20 	bl	8002e44 <HAL_ADC_GetValue>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800120a:	801a      	strh	r2, [r3, #0]
				ADCRes = (uint16_t)(3.3 * (double)ADCRes / 4.095);    // [mV]
 800120c:	4b57      	ldr	r3, [pc, #348]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f977 	bl	8000504 <__aeabi_ui2d>
 8001216:	a34c      	add	r3, pc, #304	; (adr r3, 8001348 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff f9ec 	bl	80005f8 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	a349      	add	r3, pc, #292	; (adr r3, 8001350 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff fb0d 	bl	800084c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fbef 	bl	8000a1c <__aeabi_d2uiz>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b4a      	ldr	r3, [pc, #296]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001244:	801a      	strh	r2, [r3, #0]
				printf("ADC: %d \r\n", ADCRes);
 8001246:	4b49      	ldr	r3, [pc, #292]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	484d      	ldr	r0, [pc, #308]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800124e:	f004 fe91 	bl	8005f74 <iprintf>
				TimerCnt = 0;
 8001252:	4b4a      	ldr	r3, [pc, #296]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
		switch (TimerCnt) {
 8001258:	e225      	b.n	80016a6 <HAL_TIM_PeriodElapsedCallback+0x5ee>
				  }
  }
	else if ( (htim == &htim1) && (x%3==1) ){
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a3e      	ldr	r2, [pc, #248]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	f040 8149 	bne.w	80014f6 <HAL_TIM_PeriodElapsedCallback+0x43e>
 8001264:	4b3d      	ldr	r3, [pc, #244]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001266:	6819      	ldr	r1, [r3, #0]
 8001268:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800126a:	fb83 3201 	smull	r3, r2, r3, r1
 800126e:	17cb      	asrs	r3, r1, #31
 8001270:	1ad2      	subs	r2, r2, r3
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	1aca      	subs	r2, r1, r3
 800127a:	2a01      	cmp	r2, #1
 800127c:	f040 813b 	bne.w	80014f6 <HAL_TIM_PeriodElapsedCallback+0x43e>
		 switch (disp) {
 8001280:	4b39      	ldr	r3, [pc, #228]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3b01      	subs	r3, #1
 8001286:	2b03      	cmp	r3, #3
 8001288:	f200 8090 	bhi.w	80013ac <HAL_TIM_PeriodElapsedCallback+0x2f4>
 800128c:	a201      	add	r2, pc, #4	; (adr r2, 8001294 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800128e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001292:	bf00      	nop
 8001294:	080012a5 	.word	0x080012a5
 8001298:	080012d1 	.word	0x080012d1
 800129c:	08001309 	.word	0x08001309
 80012a0:	0800138d 	.word	0x0800138d
				  case 1:
					  display(counter % 10, 4);
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b37      	ldr	r3, [pc, #220]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012aa:	fb83 1302 	smull	r1, r3, r3, r2
 80012ae:	1099      	asrs	r1, r3, #2
 80012b0:	17d3      	asrs	r3, r2, #31
 80012b2:	1ac8      	subs	r0, r1, r3
 80012b4:	4603      	mov	r3, r0
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4403      	add	r3, r0
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	1ad0      	subs	r0, r2, r3
 80012be:	2104      	movs	r1, #4
 80012c0:	f7ff fe4e 	bl	8000f60 <display>
					  disp++;
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	4a27      	ldr	r2, [pc, #156]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80012cc:	6013      	str	r3, [r2, #0]
					  break;
 80012ce:	e06d      	b.n	80013ac <HAL_TIM_PeriodElapsedCallback+0x2f4>
				  case 2:
					  display((counter % 100) / 10, 3);
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80012d6:	fb83 1302 	smull	r1, r3, r3, r2
 80012da:	1159      	asrs	r1, r3, #5
 80012dc:	17d3      	asrs	r3, r2, #31
 80012de:	1acb      	subs	r3, r1, r3
 80012e0:	2164      	movs	r1, #100	; 0x64
 80012e2:	fb01 f303 	mul.w	r3, r1, r3
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	4a27      	ldr	r2, [pc, #156]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012ea:	fb82 1203 	smull	r1, r2, r2, r3
 80012ee:	1092      	asrs	r2, r2, #2
 80012f0:	17db      	asrs	r3, r3, #31
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2103      	movs	r1, #3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fe32 	bl	8000f60 <display>
					  disp++;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001304:	6013      	str	r3, [r2, #0]
					  break;
 8001306:	e051      	b.n	80013ac <HAL_TIM_PeriodElapsedCallback+0x2f4>
				  case 3:
					  display((counter % 1000)/100, 2);
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800130e:	fb83 1302 	smull	r1, r3, r3, r2
 8001312:	1199      	asrs	r1, r3, #6
 8001314:	17d3      	asrs	r3, r2, #31
 8001316:	1acb      	subs	r3, r1, r3
 8001318:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	4a14      	ldr	r2, [pc, #80]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001324:	fb82 1203 	smull	r1, r2, r2, r3
 8001328:	1152      	asrs	r2, r2, #5
 800132a:	17db      	asrs	r3, r3, #31
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2102      	movs	r1, #2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe15 	bl	8000f60 <display>
					  disp++;
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800133e:	6013      	str	r3, [r2, #0]
					  break;
 8001340:	e034      	b.n	80013ac <HAL_TIM_PeriodElapsedCallback+0x2f4>
 8001342:	bf00      	nop
 8001344:	f3af 8000 	nop.w
 8001348:	66666666 	.word	0x66666666
 800134c:	400a6666 	.word	0x400a6666
 8001350:	ae147ae1 	.word	0xae147ae1
 8001354:	40106147 	.word	0x40106147
 8001358:	200001c4 	.word	0x200001c4
 800135c:	20000004 	.word	0x20000004
 8001360:	55555556 	.word	0x55555556
 8001364:	200000a0 	.word	0x200000a0
 8001368:	20000000 	.word	0x20000000
 800136c:	200002f0 	.word	0x200002f0
 8001370:	cccccccd 	.word	0xcccccccd
 8001374:	51eb851f 	.word	0x51eb851f
 8001378:	10624dd3 	.word	0x10624dd3
 800137c:	20000094 	.word	0x20000094
 8001380:	20000100 	.word	0x20000100
 8001384:	08006e38 	.word	0x08006e38
 8001388:	66666667 	.word	0x66666667
				  case 4:
					  display(counter/1000, 1);
 800138c:	4bb2      	ldr	r3, [pc, #712]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4ab2      	ldr	r2, [pc, #712]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001392:	fb82 1203 	smull	r1, r2, r2, r3
 8001396:	1192      	asrs	r2, r2, #6
 8001398:	17db      	asrs	r3, r3, #31
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2101      	movs	r1, #1
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fdde 	bl	8000f60 <display>
					  disp = 1;
 80013a4:	4bae      	ldr	r3, [pc, #696]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
					  break;
 80013aa:	bf00      	nop
				  }
		 LED(3);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f7ff fd81 	bl	8000eb4 <LED>
		 TimerCnt2++;
 80013b2:	4bac      	ldr	r3, [pc, #688]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4aaa      	ldr	r2, [pc, #680]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80013ba:	6013      	str	r3, [r2, #0]
		 switch (TimerCnt2) {
 80013bc:	4ba9      	ldr	r3, [pc, #676]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013c4:	f040 816f 	bne.w	80016a6 <HAL_TIM_PeriodElapsedCallback+0x5ee>
		 			case 1000:
//						HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDMABuff,  3);
//						HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//						uint16_t VRef, Temp, ADCRes;
						ADCRes = ADCDMABuff[0];
 80013c8:	4ba7      	ldr	r3, [pc, #668]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80013ca:	881a      	ldrh	r2, [r3, #0]
 80013cc:	4ba7      	ldr	r3, [pc, #668]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80013ce:	801a      	strh	r2, [r3, #0]
						ADCRes = (uint16_t)(3.3 * (double)ADCRes / 4.095);
 80013d0:	4ba6      	ldr	r3, [pc, #664]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f895 	bl	8000504 <__aeabi_ui2d>
 80013da:	a39b      	add	r3, pc, #620	; (adr r3, 8001648 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff f90a 	bl	80005f8 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	a398      	add	r3, pc, #608	; (adr r3, 8001650 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff fa2b 	bl	800084c <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fb0d 	bl	8000a1c <__aeabi_d2uiz>
 8001402:	4603      	mov	r3, r0
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b99      	ldr	r3, [pc, #612]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001408:	801a      	strh	r2, [r3, #0]

						Temp = ADCDMABuff[1];
 800140a:	4b97      	ldr	r3, [pc, #604]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800140c:	885a      	ldrh	r2, [r3, #2]
 800140e:	4b98      	ldr	r3, [pc, #608]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001410:	801a      	strh	r2, [r3, #0]
						Temp = (float)(((3.3 * Temp/4.095 - 697)/2.5)*100);
 8001412:	4b97      	ldr	r3, [pc, #604]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f884 	bl	8000524 <__aeabi_i2d>
 800141c:	a38a      	add	r3, pc, #552	; (adr r3, 8001648 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f8e9 	bl	80005f8 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	a388      	add	r3, pc, #544	; (adr r3, 8001650 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff fa0a 	bl	800084c <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	4b8b      	ldr	r3, [pc, #556]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001446:	f7fe ff1f 	bl	8000288 <__aeabi_dsub>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001458:	f7ff f9f8 	bl	800084c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b84      	ldr	r3, [pc, #528]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800146a:	f7ff f8c5 	bl	80005f8 <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff faf1 	bl	8000a5c <__aeabi_d2f>
 800147a:	ee07 0a90 	vmov	s15, r0
 800147e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001482:	ee17 3a90 	vmov	r3, s15
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b79      	ldr	r3, [pc, #484]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800148a:	801a      	strh	r2, [r3, #0]

						VRef = ADCDMABuff[2];
 800148c:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800148e:	889a      	ldrh	r2, [r3, #4]
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001492:	801a      	strh	r2, [r3, #0]
						VRef = (uint16_t)(3.3 * (double)VRef / 4.095);
 8001494:	4b7a      	ldr	r3, [pc, #488]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f833 	bl	8000504 <__aeabi_ui2d>
 800149e:	a36a      	add	r3, pc, #424	; (adr r3, 8001648 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f8a8 	bl	80005f8 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	a367      	add	r3, pc, #412	; (adr r3, 8001650 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f9c9 	bl	800084c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff faab 	bl	8000a1c <__aeabi_d2uiz>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b6d      	ldr	r3, [pc, #436]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80014cc:	801a      	strh	r2, [r3, #0]

						printf("%d %d %d \r\n", (uint16_t)ADCRes, (uint16_t)Temp, (uint16_t)VRef);
 80014ce:	4b67      	ldr	r3, [pc, #412]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4b66      	ldr	r3, [pc, #408]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b69      	ldr	r3, [pc, #420]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	4869      	ldr	r0, [pc, #420]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80014e0:	f004 fd48 	bl	8005f74 <iprintf>
//						printf("%d %d %d \r\n", ADCDMABuff);
						counter++;
 80014e4:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	4a5b      	ldr	r2, [pc, #364]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80014ec:	6013      	str	r3, [r2, #0]
						TimerCnt2 = 0;
 80014ee:	4b5d      	ldr	r3, [pc, #372]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
		 switch (TimerCnt2) {
 80014f4:	e0d7      	b.n	80016a6 <HAL_TIM_PeriodElapsedCallback+0x5ee>
			  }

 }
	else if ( (htim == &htim1) && (x%3==2) ){
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a63      	ldr	r2, [pc, #396]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	f040 80d2 	bne.w	80016a4 <HAL_TIM_PeriodElapsedCallback+0x5ec>
 8001500:	4b62      	ldr	r3, [pc, #392]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001502:	6819      	ldr	r1, [r3, #0]
 8001504:	4b62      	ldr	r3, [pc, #392]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001506:	fb83 3201 	smull	r3, r2, r3, r1
 800150a:	17cb      	asrs	r3, r1, #31
 800150c:	1ad2      	subs	r2, r2, r3
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	1aca      	subs	r2, r1, r3
 8001516:	2a02      	cmp	r2, #2
 8001518:	f040 80c4 	bne.w	80016a4 <HAL_TIM_PeriodElapsedCallback+0x5ec>
		counter = 0;
 800151c:	4b4e      	ldr	r3, [pc, #312]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
//			  case 4:
//				  display(d4, 4);
//				  disp = 1;
//				  break;
//			  }
		switch (disp) {
 8001522:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3b01      	subs	r3, #1
 8001528:	2b03      	cmp	r3, #3
 800152a:	d860      	bhi.n	80015ee <HAL_TIM_PeriodElapsedCallback+0x536>
 800152c:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001532:	bf00      	nop
 8001534:	08001545 	.word	0x08001545
 8001538:	08001571 	.word	0x08001571
 800153c:	080015a1 	.word	0x080015a1
 8001540:	080015d3 	.word	0x080015d3
			  case 1:
				  display(click_cnt % 10, 4);
 8001544:	4b53      	ldr	r3, [pc, #332]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800154a:	fba3 2301 	umull	r2, r3, r3, r1
 800154e:	08da      	lsrs	r2, r3, #3
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	1aca      	subs	r2, r1, r3
 800155a:	4613      	mov	r3, r2
 800155c:	2104      	movs	r1, #4
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fcfe 	bl	8000f60 <display>
				  disp++;
 8001564:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a3d      	ldr	r2, [pc, #244]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800156c:	6013      	str	r3, [r2, #0]
				  break;
 800156e:	e03e      	b.n	80015ee <HAL_TIM_PeriodElapsedCallback+0x536>
			  case 2:
				  display((click_cnt % 100) / 10, 3);
 8001570:	4b48      	ldr	r3, [pc, #288]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b49      	ldr	r3, [pc, #292]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001576:	fba3 1302 	umull	r1, r3, r3, r2
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2164      	movs	r1, #100	; 0x64
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	4a44      	ldr	r2, [pc, #272]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	2103      	movs	r1, #3
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fce6 	bl	8000f60 <display>
				  disp++;
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	4a31      	ldr	r2, [pc, #196]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800159c:	6013      	str	r3, [r2, #0]
				  break;
 800159e:	e026      	b.n	80015ee <HAL_TIM_PeriodElapsedCallback+0x536>
			  case 3:
				  display((click_cnt % 1000)/100, 2);
 80015a0:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80015a6:	fba3 1302 	umull	r1, r3, r3, r2
 80015aa:	099b      	lsrs	r3, r3, #6
 80015ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	4a39      	ldr	r2, [pc, #228]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	095b      	lsrs	r3, r3, #5
 80015be:	2102      	movs	r1, #2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fccd 	bl	8000f60 <display>
				  disp++;
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	4a24      	ldr	r2, [pc, #144]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80015ce:	6013      	str	r3, [r2, #0]
				  break;
 80015d0:	e00d      	b.n	80015ee <HAL_TIM_PeriodElapsedCallback+0x536>
			  case 4:
				  display(click_cnt/1000, 1);
 80015d2:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a21      	ldr	r2, [pc, #132]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	099b      	lsrs	r3, r3, #6
 80015de:	2101      	movs	r1, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fcbd 	bl	8000f60 <display>
				  disp = 1;
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
				  break;
 80015ec:	bf00      	nop

//		data_x = SPIRead(LIS35DE_OUTX);
//		data_y = SPIRead(LIS35DE_OUTY);
//		data_z = SPIRead(LIS35DE_OUTZ);
//		printf("%d %d %d \r\n", (int)data_x, (int)data_y, (int)data_z);
		TimerCnt++;
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a2a      	ldr	r2, [pc, #168]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80015f6:	6013      	str	r3, [r2, #0]
		switch (TimerCnt) {
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b32      	cmp	r3, #50	; 0x32
 80015fe:	d002      	beq.n	8001606 <HAL_TIM_PeriodElapsedCallback+0x54e>
 8001600:	2b64      	cmp	r3, #100	; 0x64
 8001602:	d019      	beq.n	8001638 <HAL_TIM_PeriodElapsedCallback+0x580>
 8001604:	e04f      	b.n	80016a6 <HAL_TIM_PeriodElapsedCallback+0x5ee>
			case 50:
				LED(4);
 8001606:	2004      	movs	r0, #4
 8001608:	f7ff fc54 	bl	8000eb4 <LED>
				data_x = SPIRead(LIS35DE_OUTX);
 800160c:	2029      	movs	r0, #41	; 0x29
 800160e:	f7ff fbf1 	bl	8000df4 <SPIRead>
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
				data_y = SPIRead(LIS35DE_OUTY);
 8001616:	202b      	movs	r0, #43	; 0x2b
 8001618:	f7ff fbec 	bl	8000df4 <SPIRead>
 800161c:	4603      	mov	r3, r0
 800161e:	73bb      	strb	r3, [r7, #14]
				data_z = SPIRead(LIS35DE_OUTZ);
 8001620:	202d      	movs	r0, #45	; 0x2d
 8001622:	f7ff fbe7 	bl	8000df4 <SPIRead>
 8001626:	4603      	mov	r3, r0
 8001628:	737b      	strb	r3, [r7, #13]
				printf("%d %d %d \r\n", (int)data_x, (int)data_y, (int)data_z);
 800162a:	7bf9      	ldrb	r1, [r7, #15]
 800162c:	7bba      	ldrb	r2, [r7, #14]
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	4814      	ldr	r0, [pc, #80]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001632:	f004 fc9f 	bl	8005f74 <iprintf>
//				}
//				if (d4 == 16){
//					d4 = 10;
//				}

				break;
 8001636:	e036      	b.n	80016a6 <HAL_TIM_PeriodElapsedCallback+0x5ee>
			case 100:
				LED(5);
 8001638:	2005      	movs	r0, #5
 800163a:	f7ff fc3b 	bl	8000eb4 <LED>
				TimerCnt = 0;
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
				break;
 8001644:	e02f      	b.n	80016a6 <HAL_TIM_PeriodElapsedCallback+0x5ee>
 8001646:	bf00      	nop
 8001648:	66666666 	.word	0x66666666
 800164c:	400a6666 	.word	0x400a6666
 8001650:	ae147ae1 	.word	0xae147ae1
 8001654:	40106147 	.word	0x40106147
 8001658:	200000a0 	.word	0x200000a0
 800165c:	10624dd3 	.word	0x10624dd3
 8001660:	20000000 	.word	0x20000000
 8001664:	20000098 	.word	0x20000098
 8001668:	2000015c 	.word	0x2000015c
 800166c:	200002f0 	.word	0x200002f0
 8001670:	200000fa 	.word	0x200000fa
 8001674:	4085c800 	.word	0x4085c800
 8001678:	40040000 	.word	0x40040000
 800167c:	40590000 	.word	0x40590000
 8001680:	200000f8 	.word	0x200000f8
 8001684:	08006e44 	.word	0x08006e44
 8001688:	200001c4 	.word	0x200001c4
 800168c:	20000004 	.word	0x20000004
 8001690:	55555556 	.word	0x55555556
 8001694:	200000fc 	.word	0x200000fc
 8001698:	cccccccd 	.word	0xcccccccd
 800169c:	51eb851f 	.word	0x51eb851f
 80016a0:	20000094 	.word	0x20000094
		}
	}
 80016a4:	bf00      	nop
	if (htim == &htim10){
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d116      	bne.n	80016dc <HAL_TIM_PeriodElapsedCallback+0x624>
		if ((HAL_GPIO_ReadPin(GPIOB, Button1_Pin) == 0) || (HAL_GPIO_ReadPin(GPIOB, Button2_Pin) == 0)){
 80016ae:	2101      	movs	r1, #1
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80016b2:	f002 fd1d 	bl	80040f0 <HAL_GPIO_ReadPin>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_TIM_PeriodElapsedCallback+0x612>
 80016bc:	2120      	movs	r1, #32
 80016be:	480a      	ldr	r0, [pc, #40]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80016c0:	f002 fd16 	bl	80040f0 <HAL_GPIO_ReadPin>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d105      	bne.n	80016d6 <HAL_TIM_PeriodElapsedCallback+0x61e>
					licznik++;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x634>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	4a06      	ldr	r2, [pc, #24]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x634>)
 80016d2:	6013      	str	r3, [r2, #0]
				}
		else licznik = 0;
	}

}
 80016d4:	e002      	b.n	80016dc <HAL_TIM_PeriodElapsedCallback+0x624>
		else licznik = 0;
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x634>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200000b0 	.word	0x200000b0
 80016e8:	40020400 	.word	0x40020400
 80016ec:	2000009c 	.word	0x2000009c

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f4:	f000 fec0 	bl	8002478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f8:	f000 f89e 	bl	8001838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fc:	f000 fad8 	bl	8001cb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001700:	f000 fa8c 	bl	8001c1c <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8001704:	f000 fa66 	bl	8001bd4 <MX_TIM10_Init>
  MX_DMA_Init();
 8001708:	f000 fab2 	bl	8001c70 <MX_DMA_Init>
  MX_ADC1_Init();
 800170c:	f000 f8fc 	bl	8001908 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001710:	f000 f9c4 	bl	8001a9c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001714:	f000 fa12 	bl	8001b3c <MX_TIM2_Init>
  MX_SPI1_Init();
 8001718:	f000 f988 	bl	8001a2c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800171c:	483e      	ldr	r0, [pc, #248]	; (8001818 <main+0x128>)
 800171e:	f003 fceb 	bl	80050f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001722:	483e      	ldr	r0, [pc, #248]	; (800181c <main+0x12c>)
 8001724:	f003 fce8 	bl	80050f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001728:	483d      	ldr	r0, [pc, #244]	; (8001820 <main+0x130>)
 800172a:	f003 fce5 	bl	80050f8 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 800172e:	483d      	ldr	r0, [pc, #244]	; (8001824 <main+0x134>)
 8001730:	f001 f898 	bl	8002864 <HAL_ADC_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDMABuff,  3);
 8001734:	2203      	movs	r2, #3
 8001736:	493c      	ldr	r1, [pc, #240]	; (8001828 <main+0x138>)
 8001738:	483a      	ldr	r0, [pc, #232]	; (8001824 <main+0x134>)
 800173a:	f001 fa93 	bl	8002c64 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc1);
 800173e:	4839      	ldr	r0, [pc, #228]	; (8001824 <main+0x134>)
 8001740:	f000 ff50 	bl	80025e4 <HAL_ADC_Start>
  SPIWrite(LIS35DE_CTRL_REG1, LIS35DE_CTRL_REG1_DR | LIS35DE_CTRL_REG1_PD | LIS35DE_CTRL_REG1_ZEN |
 8001744:	21c7      	movs	r1, #199	; 0xc7
 8001746:	2020      	movs	r0, #32
 8001748:	f7ff fb84 	bl	8000e54 <SPIWrite>
		  	  	  	  	  	  LIS35DE_CTRL_REG1_YEN | LIS35DE_CTRL_REG1_XEN);
  SPIWrite(LIS35DE_CTRL_REG2, LIS35DE_CTRL_REG2_BOOT);
 800174c:	2140      	movs	r1, #64	; 0x40
 800174e:	2021      	movs	r0, #33	; 0x21
 8001750:	f7ff fb80 	bl	8000e54 <SPIWrite>
  SPIWrite(LIS35DE_CTRL_REG3, LIS35DE_CTRL_REG3_IHL | LIS35DE_CTRL_REG3_I1CFG0 |
 8001754:	2187      	movs	r1, #135	; 0x87
 8001756:	2022      	movs	r0, #34	; 0x22
 8001758:	f7ff fb7c 	bl	8000e54 <SPIWrite>
		  	  	  	  	  	  LIS35DE_CTRL_REG3_I1CFG1 | LIS35DE_CTRL_REG3_I1CFG2);

  SPIWrite(LIS35DE_CLICK_CFG, LIS35DE_CLICK_CFG_DOUBLE_X | LIS35DE_CLICK_CFG_DOUBLE_Y | LIS35DE_CLICK_CFG_DOUBLE_Z);
 800175c:	212a      	movs	r1, #42	; 0x2a
 800175e:	2038      	movs	r0, #56	; 0x38
 8001760:	f7ff fb78 	bl	8000e54 <SPIWrite>
  SPIWrite(LIS35DE_CLICK_THSY_X, 0xF1);
 8001764:	21f1      	movs	r1, #241	; 0xf1
 8001766:	203b      	movs	r0, #59	; 0x3b
 8001768:	f7ff fb74 	bl	8000e54 <SPIWrite>
  SPIWrite(LIS35DE_CLICK_THSZ, 0x01);
 800176c:	2101      	movs	r1, #1
 800176e:	203c      	movs	r0, #60	; 0x3c
 8001770:	f7ff fb70 	bl	8000e54 <SPIWrite>

  SPIWrite(LIS35DE_CLICK_TIMELIMIT, 0xFF);
 8001774:	21ff      	movs	r1, #255	; 0xff
 8001776:	203d      	movs	r0, #61	; 0x3d
 8001778:	f7ff fb6c 	bl	8000e54 <SPIWrite>
  SPIWrite(LIS35DE_CLICK_LATENCY, 0x7F);
 800177c:	217f      	movs	r1, #127	; 0x7f
 800177e:	203e      	movs	r0, #62	; 0x3e
 8001780:	f7ff fb68 	bl	8000e54 <SPIWrite>
  SPIWrite(LIS35DE_CLICK_WINDOW, 0xFF);
 8001784:	21ff      	movs	r1, #255	; 0xff
 8001786:	203f      	movs	r0, #63	; 0x3f
 8001788:	f7ff fb64 	bl	8000e54 <SPIWrite>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ((licznik>5) && (licznik<255)){
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <main+0x13c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b05      	cmp	r3, #5
 8001792:	ddfb      	ble.n	800178c <main+0x9c>
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <main+0x13c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2bfe      	cmp	r3, #254	; 0xfe
 800179a:	dcf7      	bgt.n	800178c <main+0x9c>
		  if(HAL_GPIO_ReadPin(GPIOB, Button1_Pin) == 0){
 800179c:	2101      	movs	r1, #1
 800179e:	4824      	ldr	r0, [pc, #144]	; (8001830 <main+0x140>)
 80017a0:	f002 fca6 	bl	80040f0 <HAL_GPIO_ReadPin>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d117      	bne.n	80017da <main+0xea>
			  if (x == 0){
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <main+0x144>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d106      	bne.n	80017c0 <main+0xd0>
				  x = 0;
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <main+0x144>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
				  licznik = 255;
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <main+0x13c>)
 80017ba:	22ff      	movs	r2, #255	; 0xff
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e7e5      	b.n	800178c <main+0x9c>
			  }
			  else if (x > 0){
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <main+0x144>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	dde1      	ble.n	800178c <main+0x9c>
				  x--;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <main+0x144>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	4a19      	ldr	r2, [pc, #100]	; (8001834 <main+0x144>)
 80017d0:	6013      	str	r3, [r2, #0]
				  licznik = 255;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <main+0x13c>)
 80017d4:	22ff      	movs	r2, #255	; 0xff
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e7d8      	b.n	800178c <main+0x9c>
			  }
		  }
		  else if ((HAL_GPIO_ReadPin(GPIOB, Button2_Pin) == 0)){
 80017da:	2120      	movs	r1, #32
 80017dc:	4814      	ldr	r0, [pc, #80]	; (8001830 <main+0x140>)
 80017de:	f002 fc87 	bl	80040f0 <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1d1      	bne.n	800178c <main+0x9c>
			  if (x == 2){
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <main+0x144>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d106      	bne.n	80017fe <main+0x10e>
				  x = 2;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <main+0x144>)
 80017f2:	2202      	movs	r2, #2
 80017f4:	601a      	str	r2, [r3, #0]
				  licznik = 255;
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <main+0x13c>)
 80017f8:	22ff      	movs	r2, #255	; 0xff
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e7c6      	b.n	800178c <main+0x9c>
			  }
			  else if (x <2){
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <main+0x144>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	dcc2      	bgt.n	800178c <main+0x9c>
				  x++;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <main+0x144>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <main+0x144>)
 800180e:	6013      	str	r3, [r2, #0]
				  licznik = 255;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <main+0x13c>)
 8001812:	22ff      	movs	r2, #255	; 0xff
 8001814:	601a      	str	r2, [r3, #0]
	  if ((licznik>5) && (licznik<255)){
 8001816:	e7b9      	b.n	800178c <main+0x9c>
 8001818:	200001c4 	.word	0x200001c4
 800181c:	20000264 	.word	0x20000264
 8001820:	200000b0 	.word	0x200000b0
 8001824:	20000100 	.word	0x20000100
 8001828:	2000015c 	.word	0x2000015c
 800182c:	2000009c 	.word	0x2000009c
 8001830:	40020400 	.word	0x40020400
 8001834:	20000004 	.word	0x20000004

08001838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b094      	sub	sp, #80	; 0x50
 800183c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183e:	f107 0320 	add.w	r3, r7, #32
 8001842:	2230      	movs	r2, #48	; 0x30
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f004 fb8c 	bl	8005f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	4b27      	ldr	r3, [pc, #156]	; (8001900 <SystemClock_Config+0xc8>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	4a26      	ldr	r2, [pc, #152]	; (8001900 <SystemClock_Config+0xc8>)
 8001866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186a:	6413      	str	r3, [r2, #64]	; 0x40
 800186c:	4b24      	ldr	r3, [pc, #144]	; (8001900 <SystemClock_Config+0xc8>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001878:	2300      	movs	r3, #0
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <SystemClock_Config+0xcc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a20      	ldr	r2, [pc, #128]	; (8001904 <SystemClock_Config+0xcc>)
 8001882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <SystemClock_Config+0xcc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001894:	2302      	movs	r3, #2
 8001896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001898:	2301      	movs	r3, #1
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189c:	2310      	movs	r3, #16
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a0:	2302      	movs	r3, #2
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a4:	2300      	movs	r3, #0
 80018a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018a8:	2308      	movs	r3, #8
 80018aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018ac:	2364      	movs	r3, #100	; 0x64
 80018ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b0:	2302      	movs	r3, #2
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018b4:	2304      	movs	r3, #4
 80018b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b8:	f107 0320 	add.w	r3, r7, #32
 80018bc:	4618      	mov	r0, r3
 80018be:	f002 fc61 	bl	8004184 <HAL_RCC_OscConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018c8:	f000 fad6 	bl	8001e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018cc:	230f      	movs	r3, #15
 80018ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d0:	2302      	movs	r3, #2
 80018d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	2103      	movs	r1, #3
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 fec3 	bl	8004674 <HAL_RCC_ClockConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018f4:	f000 fac0 	bl	8001e78 <Error_Handler>
  }
}
 80018f8:	bf00      	nop
 80018fa:	3750      	adds	r7, #80	; 0x50
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40023800 	.word	0x40023800
 8001904:	40007000 	.word	0x40007000

08001908 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001920:	463b      	mov	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800192c:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <MX_ADC1_Init+0x114>)
 800192e:	4a3c      	ldr	r2, [pc, #240]	; (8001a20 <MX_ADC1_Init+0x118>)
 8001930:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001932:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <MX_ADC1_Init+0x114>)
 8001934:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001938:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <MX_ADC1_Init+0x114>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001940:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <MX_ADC1_Init+0x114>)
 8001942:	2201      	movs	r2, #1
 8001944:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001946:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <MX_ADC1_Init+0x114>)
 8001948:	2201      	movs	r2, #1
 800194a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <MX_ADC1_Init+0x114>)
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <MX_ADC1_Init+0x114>)
 8001956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800195a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <MX_ADC1_Init+0x114>)
 800195e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <MX_ADC1_Init+0x114>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <MX_ADC1_Init+0x114>)
 800196c:	2203      	movs	r2, #3
 800196e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <MX_ADC1_Init+0x114>)
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <MX_ADC1_Init+0x114>)
 800197a:	2201      	movs	r2, #1
 800197c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800197e:	4827      	ldr	r0, [pc, #156]	; (8001a1c <MX_ADC1_Init+0x114>)
 8001980:	f000 fdec 	bl	800255c <HAL_ADC_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800198a:	f000 fa75 	bl	8001e78 <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <MX_ADC1_Init+0x11c>)
 8001990:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 2000;
 8001992:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001996:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 800199c:	2301      	movs	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = ENABLE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	4619      	mov	r1, r3
 80019ac:	481b      	ldr	r0, [pc, #108]	; (8001a1c <MX_ADC1_Init+0x114>)
 80019ae:	f001 fbb1 	bl	8003114 <HAL_ADC_AnalogWDGConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80019b8:	f000 fa5e 	bl	8001e78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019bc:	2301      	movs	r3, #1
 80019be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019c0:	2301      	movs	r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80019c4:	2307      	movs	r3, #7
 80019c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c8:	463b      	mov	r3, r7
 80019ca:	4619      	mov	r1, r3
 80019cc:	4813      	ldr	r0, [pc, #76]	; (8001a1c <MX_ADC1_Init+0x114>)
 80019ce:	f001 fa6f 	bl	8002eb0 <HAL_ADC_ConfigChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80019d8:	f000 fa4e 	bl	8001e78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <MX_ADC1_Init+0x120>)
 80019de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80019e0:	2302      	movs	r3, #2
 80019e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e4:	463b      	mov	r3, r7
 80019e6:	4619      	mov	r1, r3
 80019e8:	480c      	ldr	r0, [pc, #48]	; (8001a1c <MX_ADC1_Init+0x114>)
 80019ea:	f001 fa61 	bl	8002eb0 <HAL_ADC_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80019f4:	f000 fa40 	bl	8001e78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80019f8:	2311      	movs	r3, #17
 80019fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80019fc:	2303      	movs	r3, #3
 80019fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_ADC1_Init+0x114>)
 8001a06:	f001 fa53 	bl	8002eb0 <HAL_ADC_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8001a10:	f000 fa32 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000100 	.word	0x20000100
 8001a20:	40012000 	.word	0x40012000
 8001a24:	00800200 	.word	0x00800200
 8001a28:	10000012 	.word	0x10000012

08001a2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <MX_SPI1_Init+0x6c>)
 8001a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a62:	2218      	movs	r2, #24
 8001a64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a7a:	220a      	movs	r2, #10
 8001a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a80:	f002 fff4 	bl	8004a6c <HAL_SPI_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001a8a:	f000 f9f5 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000020c 	.word	0x2000020c
 8001a98:	40013000 	.word	0x40013000

08001a9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <MX_TIM1_Init+0x98>)
 8001aba:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <MX_TIM1_Init+0x9c>)
 8001abc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <MX_TIM1_Init+0x98>)
 8001ac0:	2264      	movs	r2, #100	; 0x64
 8001ac2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MX_TIM1_Init+0x98>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_TIM1_Init+0x98>)
 8001acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ad0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <MX_TIM1_Init+0x98>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <MX_TIM1_Init+0x98>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <MX_TIM1_Init+0x98>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ae4:	4813      	ldr	r0, [pc, #76]	; (8001b34 <MX_TIM1_Init+0x98>)
 8001ae6:	f003 fab7 	bl	8005058 <HAL_TIM_Base_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001af0:	f000 f9c2 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	4619      	mov	r1, r3
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <MX_TIM1_Init+0x98>)
 8001b02:	f003 fc63 	bl	80053cc <HAL_TIM_ConfigClockSource>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b0c:	f000 f9b4 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b18:	463b      	mov	r3, r7
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_TIM1_Init+0x98>)
 8001b1e:	f003 fe5f 	bl	80057e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b28:	f000 f9a6 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200001c4 	.word	0x200001c4
 8001b38:	40010000 	.word	0x40010000

08001b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	463b      	mov	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b62:	2263      	movs	r2, #99	; 0x63
 8001b64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b80:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b82:	f003 fa69 	bl	8005058 <HAL_TIM_Base_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b8c:	f000 f974 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b9e:	f003 fc15 	bl	80053cc <HAL_TIM_ConfigClockSource>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ba8:	f000 f966 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bac:	2320      	movs	r3, #32
 8001bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001bba:	f003 fe11 	bl	80057e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bc4:	f000 f958 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000264 	.word	0x20000264

08001bd4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_TIM10_Init+0x40>)
 8001bda:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <MX_TIM10_Init+0x44>)
 8001bdc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <MX_TIM10_Init+0x40>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_TIM10_Init+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <MX_TIM10_Init+0x40>)
 8001bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_TIM10_Init+0x40>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_TIM10_Init+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_TIM10_Init+0x40>)
 8001c00:	f003 fa2a 	bl	8005058 <HAL_TIM_Base_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001c0a:	f000 f935 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200000b0 	.word	0x200000b0
 8001c18:	40014400 	.word	0x40014400

08001c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <MX_USART2_UART_Init+0x50>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c54:	f003 fe46 	bl	80058e4 <HAL_UART_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c5e:	f000 f90b 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200002ac 	.word	0x200002ac
 8001c6c:	40004400 	.word	0x40004400

08001c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_DMA_Init+0x3c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <MX_DMA_Init+0x3c>)
 8001c80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_DMA_Init+0x3c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	2038      	movs	r0, #56	; 0x38
 8001c98:	f001 fcff 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c9c:	2038      	movs	r0, #56	; 0x38
 8001c9e:	f001 fd18 	bl	80036d2 <HAL_NVIC_EnableIRQ>

}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800

08001cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b5c      	ldr	r3, [pc, #368]	; (8001e3c <MX_GPIO_Init+0x18c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a5b      	ldr	r2, [pc, #364]	; (8001e3c <MX_GPIO_Init+0x18c>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <MX_GPIO_Init+0x18c>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <MX_GPIO_Init+0x18c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a54      	ldr	r2, [pc, #336]	; (8001e3c <MX_GPIO_Init+0x18c>)
 8001cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b52      	ldr	r3, [pc, #328]	; (8001e3c <MX_GPIO_Init+0x18c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <MX_GPIO_Init+0x18c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a4d      	ldr	r2, [pc, #308]	; (8001e3c <MX_GPIO_Init+0x18c>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <MX_GPIO_Init+0x18c>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <MX_GPIO_Init+0x18c>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a46      	ldr	r2, [pc, #280]	; (8001e3c <MX_GPIO_Init+0x18c>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <MX_GPIO_Init+0x18c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S7G_Pin|S7D_Pin|S7E_Pin|S7C_Pin
 8001d36:	2200      	movs	r2, #0
 8001d38:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001d3c:	4840      	ldr	r0, [pc, #256]	; (8001e40 <MX_GPIO_Init+0x190>)
 8001d3e:	f002 f9ef 	bl	8004120 <HAL_GPIO_WritePin>
                          |S7B_Pin|S7F_Pin|S7A_Pin|S7DP_Pin
                          |S7Com4_Pin|S7Com3_Pin|S7Com2_Pin|S7Com1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_NSS_GPIO_Port, SPI_NSS_Pin, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2110      	movs	r1, #16
 8001d46:	483f      	ldr	r0, [pc, #252]	; (8001e44 <MX_GPIO_Init+0x194>)
 8001d48:	f002 f9ea 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001d52:	483d      	ldr	r0, [pc, #244]	; (8001e48 <MX_GPIO_Init+0x198>)
 8001d54:	f002 f9e4 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4834      	ldr	r0, [pc, #208]	; (8001e40 <MX_GPIO_Init+0x190>)
 8001d70:	f002 f83a 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S7G_Pin S7D_Pin S7E_Pin S7C_Pin
                           S7B_Pin S7F_Pin S7A_Pin S7DP_Pin
                           S7Com4_Pin S7Com3_Pin S7Com2_Pin S7Com1_Pin */
  GPIO_InitStruct.Pin = S7G_Pin|S7D_Pin|S7E_Pin|S7C_Pin
 8001d74:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001d78:	617b      	str	r3, [r7, #20]
                          |S7B_Pin|S7F_Pin|S7A_Pin|S7DP_Pin
                          |S7Com4_Pin|S7Com3_Pin|S7Com2_Pin|S7Com1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	482c      	ldr	r0, [pc, #176]	; (8001e40 <MX_GPIO_Init+0x190>)
 8001d8e:	f002 f82b 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_NSS_Pin */
  GPIO_InitStruct.Pin = SPI_NSS_Pin;
 8001d92:	2310      	movs	r3, #16
 8001d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d96:	2301      	movs	r3, #1
 8001d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4826      	ldr	r0, [pc, #152]	; (8001e44 <MX_GPIO_Init+0x194>)
 8001daa:	f002 f81d 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 8001dae:	2321      	movs	r3, #33	; 0x21
 8001db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001db2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4821      	ldr	r0, [pc, #132]	; (8001e48 <MX_GPIO_Init+0x198>)
 8001dc4:	f002 f810 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ClickInterrupt_Pin */
  GPIO_InitStruct.Pin = ClickInterrupt_Pin;
 8001dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ClickInterrupt_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4819      	ldr	r0, [pc, #100]	; (8001e44 <MX_GPIO_Init+0x194>)
 8001de0:	f002 f802 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001de4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4812      	ldr	r0, [pc, #72]	; (8001e48 <MX_GPIO_Init+0x198>)
 8001dfe:	f001 fff3 	bl	8003de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2006      	movs	r0, #6
 8001e08:	f001 fc47 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e0c:	2006      	movs	r0, #6
 8001e0e:	f001 fc60 	bl	80036d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	2017      	movs	r0, #23
 8001e18:	f001 fc3f 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e1c:	2017      	movs	r0, #23
 8001e1e:	f001 fc58 	bl	80036d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2028      	movs	r0, #40	; 0x28
 8001e28:	f001 fc37 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e2c:	2028      	movs	r0, #40	; 0x28
 8001e2e:	f001 fc50 	bl	80036d2 <HAL_NVIC_EnableIRQ>

}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400

08001e4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_15)
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e5c:	d104      	bne.n	8001e68 <HAL_GPIO_EXTI_Callback+0x1c>
  {
	  click_cnt += 1;
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_GPIO_EXTI_Callback+0x28>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	4a03      	ldr	r2, [pc, #12]	; (8001e74 <HAL_GPIO_EXTI_Callback+0x28>)
 8001e66:	6013      	str	r3, [r2, #0]
  }
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	200000fc 	.word	0x200000fc

08001e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <Error_Handler+0x8>
	...

08001e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ec2:	2007      	movs	r0, #7
 8001ec4:	f001 fbde 	bl	8003684 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800

08001ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a33      	ldr	r2, [pc, #204]	; (8001fc0 <HAL_ADC_MspInit+0xec>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d15f      	bne.n	8001fb6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <HAL_ADC_MspInit+0xf0>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	4a31      	ldr	r2, [pc, #196]	; (8001fc4 <HAL_ADC_MspInit+0xf0>)
 8001f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f04:	6453      	str	r3, [r2, #68]	; 0x44
 8001f06:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <HAL_ADC_MspInit+0xf0>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_ADC_MspInit+0xf0>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a2a      	ldr	r2, [pc, #168]	; (8001fc4 <HAL_ADC_MspInit+0xf0>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_ADC_MspInit+0xf0>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = PV_Pin;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f32:	2303      	movs	r3, #3
 8001f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PV_GPIO_Port, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4821      	ldr	r0, [pc, #132]	; (8001fc8 <HAL_ADC_MspInit+0xf4>)
 8001f42:	f001 ff51 	bl	8003de8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001f48:	4a21      	ldr	r2, [pc, #132]	; (8001fd0 <HAL_ADC_MspInit+0xfc>)
 8001f4a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f64:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f6c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001f70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f7c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f8a:	4810      	ldr	r0, [pc, #64]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001f8c:	f001 fbbc 	bl	8003708 <HAL_DMA_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001f96:	f7ff ff6f 	bl	8001e78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001f9e:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <HAL_ADC_MspInit+0xf8>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2012      	movs	r0, #18
 8001fac:	f001 fb75 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001fb0:	2012      	movs	r0, #18
 8001fb2:	f001 fb8e 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40012000 	.word	0x40012000
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	20000164 	.word	0x20000164
 8001fd0:	40026410 	.word	0x40026410

08001fd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a28      	ldr	r2, [pc, #160]	; (8002094 <HAL_SPI_MspInit+0xc0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d149      	bne.n	800208a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_SPI_MspInit+0xc4>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a26      	ldr	r2, [pc, #152]	; (8002098 <HAL_SPI_MspInit+0xc4>)
 8002000:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_SPI_MspInit+0xc4>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HAL_SPI_MspInit+0xc4>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <HAL_SPI_MspInit+0xc4>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_SPI_MspInit+0xc4>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_SPI_MspInit+0xc4>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a18      	ldr	r2, [pc, #96]	; (8002098 <HAL_SPI_MspInit+0xc4>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <HAL_SPI_MspInit+0xc4>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800204a:	23c0      	movs	r3, #192	; 0xc0
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800205a:	2305      	movs	r3, #5
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <HAL_SPI_MspInit+0xc8>)
 8002066:	f001 febf 	bl	8003de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800206a:	2308      	movs	r3, #8
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800207a:	2305      	movs	r3, #5
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4806      	ldr	r0, [pc, #24]	; (80020a0 <HAL_SPI_MspInit+0xcc>)
 8002086:	f001 feaf 	bl	8003de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40013000 	.word	0x40013000
 8002098:	40023800 	.word	0x40023800
 800209c:	40020000 	.word	0x40020000
 80020a0:	40020400 	.word	0x40020400

080020a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a26      	ldr	r2, [pc, #152]	; (800214c <HAL_TIM_Base_MspInit+0xa8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d116      	bne.n	80020e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	4b25      	ldr	r3, [pc, #148]	; (8002150 <HAL_TIM_Base_MspInit+0xac>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a24      	ldr	r2, [pc, #144]	; (8002150 <HAL_TIM_Base_MspInit+0xac>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b22      	ldr	r3, [pc, #136]	; (8002150 <HAL_TIM_Base_MspInit+0xac>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	2019      	movs	r0, #25
 80020d8:	f001 fadf 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020dc:	2019      	movs	r0, #25
 80020de:	f001 faf8 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80020e2:	e02e      	b.n	8002142 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ec:	d10e      	bne.n	800210c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_TIM_Base_MspInit+0xac>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a16      	ldr	r2, [pc, #88]	; (8002150 <HAL_TIM_Base_MspInit+0xac>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_TIM_Base_MspInit+0xac>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
}
 800210a:	e01a      	b.n	8002142 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a10      	ldr	r2, [pc, #64]	; (8002154 <HAL_TIM_Base_MspInit+0xb0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d115      	bne.n	8002142 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_TIM_Base_MspInit+0xac>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <HAL_TIM_Base_MspInit+0xac>)
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_TIM_Base_MspInit+0xac>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	2019      	movs	r0, #25
 8002138:	f001 faaf 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800213c:	2019      	movs	r0, #25
 800213e:	f001 fac8 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40010000 	.word	0x40010000
 8002150:	40023800 	.word	0x40023800
 8002154:	40014400 	.word	0x40014400

08002158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a19      	ldr	r2, [pc, #100]	; (80021dc <HAL_UART_MspInit+0x84>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d12b      	bne.n	80021d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_UART_MspInit+0x88>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_UART_MspInit+0x88>)
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_UART_MspInit+0x88>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_UART_MspInit+0x88>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <HAL_UART_MspInit+0x88>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_UART_MspInit+0x88>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021b2:	230c      	movs	r3, #12
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c2:	2307      	movs	r3, #7
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <HAL_UART_MspInit+0x8c>)
 80021ce:	f001 fe0b 	bl	8003de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40004400 	.word	0x40004400
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020000 	.word	0x40020000

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <NMI_Handler+0x4>

080021ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <HardFault_Handler+0x4>

080021f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <MemManage_Handler+0x4>

080021fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <BusFault_Handler+0x4>

08002200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <UsageFault_Handler+0x4>

08002206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002234:	f000 f972 	bl	800251c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}

0800223c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002240:	2001      	movs	r0, #1
 8002242:	f001 ff87 	bl	8004154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <ADC_IRQHandler+0x10>)
 8002252:	f000 fbc5 	bl	80029e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000100 	.word	0x20000100

08002260 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002264:	2020      	movs	r0, #32
 8002266:	f001 ff75 	bl	8004154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002276:	f002 ffa1 	bl	80051bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800227a:	4803      	ldr	r0, [pc, #12]	; (8002288 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800227c:	f002 ff9e 	bl	80051bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200001c4 	.word	0x200001c4
 8002288:	200000b0 	.word	0x200000b0

0800228c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002290:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002294:	f001 ff5e 	bl	8004154 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002298:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800229c:	f001 ff5a 	bl	8004154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <DMA2_Stream0_IRQHandler+0x10>)
 80022aa:	f001 fb33 	bl	8003914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000164 	.word	0x20000164

080022b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	e00a      	b.n	80022e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ca:	f3af 8000 	nop.w
 80022ce:	4601      	mov	r1, r0
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	60ba      	str	r2, [r7, #8]
 80022d6:	b2ca      	uxtb	r2, r1
 80022d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dbf0      	blt.n	80022ca <_read+0x12>
	}

return len;
 80022e8:	687b      	ldr	r3, [r7, #4]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	e009      	b.n	8002318 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	60ba      	str	r2, [r7, #8]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe fe15 	bl	8000f3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	dbf1      	blt.n	8002304 <_write+0x12>
	}
	return len;
 8002320:	687b      	ldr	r3, [r7, #4]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_close>:

int _close(int file)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
	return -1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002352:	605a      	str	r2, [r3, #4]
	return 0;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_isatty>:

int _isatty(int file)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
	return 1;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
	return 0;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <_sbrk+0x5c>)
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <_sbrk+0x60>)
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <_sbrk+0x64>)
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <_sbrk+0x68>)
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d207      	bcs.n	80023d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023c4:	f003 fda4 	bl	8005f10 <__errno>
 80023c8:	4603      	mov	r3, r0
 80023ca:	220c      	movs	r2, #12
 80023cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
 80023d2:	e009      	b.n	80023e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <_sbrk+0x64>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <_sbrk+0x64>)
 80023e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023e6:	68fb      	ldr	r3, [r7, #12]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20020000 	.word	0x20020000
 80023f4:	00000400 	.word	0x00000400
 80023f8:	200000a4 	.word	0x200000a4
 80023fc:	20000320 	.word	0x20000320

08002400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <SystemInit+0x20>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <SystemInit+0x20>)
 800240c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800245c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002428:	480d      	ldr	r0, [pc, #52]	; (8002460 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800242a:	490e      	ldr	r1, [pc, #56]	; (8002464 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800242c:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002430:	e002      	b.n	8002438 <LoopCopyDataInit>

08002432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002436:	3304      	adds	r3, #4

08002438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800243c:	d3f9      	bcc.n	8002432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243e:	4a0b      	ldr	r2, [pc, #44]	; (800246c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002440:	4c0b      	ldr	r4, [pc, #44]	; (8002470 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002444:	e001      	b.n	800244a <LoopFillZerobss>

08002446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002448:	3204      	adds	r2, #4

0800244a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800244c:	d3fb      	bcc.n	8002446 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800244e:	f7ff ffd7 	bl	8002400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002452:	f003 fd63 	bl	8005f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002456:	f7ff f94b 	bl	80016f0 <main>
  bx  lr    
 800245a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800245c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002464:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002468:	08006f38 	.word	0x08006f38
  ldr r2, =_sbss
 800246c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002470:	2000031c 	.word	0x2000031c

08002474 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002474:	e7fe      	b.n	8002474 <DMA1_Stream0_IRQHandler>
	...

08002478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <HAL_Init+0x40>)
 8002482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HAL_Init+0x40>)
 800248e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <HAL_Init+0x40>)
 800249a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a0:	2003      	movs	r0, #3
 80024a2:	f001 f8ef 	bl	8003684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f000 f808 	bl	80024bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ac:	f7ff fcea 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00

080024bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_InitTick+0x54>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_InitTick+0x58>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	f001 f907 	bl	80036ee <HAL_SYSTICK_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00e      	b.n	8002508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d80a      	bhi.n	8002506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f0:	2200      	movs	r2, #0
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f001 f8cf 	bl	800369a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024fc:	4a06      	ldr	r2, [pc, #24]	; (8002518 <HAL_InitTick+0x5c>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000008 	.word	0x20000008
 8002514:	20000010 	.word	0x20000010
 8002518:	2000000c 	.word	0x2000000c

0800251c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_IncTick+0x20>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x24>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4413      	add	r3, r2
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_IncTick+0x24>)
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000010 	.word	0x20000010
 8002540:	20000308 	.word	0x20000308

08002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_GetTick+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000308 	.word	0x20000308

0800255c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e033      	b.n	80025da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff fcaa 	bl	8001ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d118      	bne.n	80025cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025a2:	f023 0302 	bic.w	r3, r3, #2
 80025a6:	f043 0202 	orr.w	r2, r3, #2
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fe10 	bl	80031d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f023 0303 	bic.w	r3, r3, #3
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
 80025ca:	e001      	b.n	80025d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_Start+0x1a>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e097      	b.n	800272e <HAL_ADC_Start+0x14a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	d018      	beq.n	8002646 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002624:	4b45      	ldr	r3, [pc, #276]	; (800273c <HAL_ADC_Start+0x158>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a45      	ldr	r2, [pc, #276]	; (8002740 <HAL_ADC_Start+0x15c>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0c9a      	lsrs	r2, r3, #18
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002638:	e002      	b.n	8002640 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3b01      	subs	r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f9      	bne.n	800263a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d15f      	bne.n	8002714 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800267e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002692:	d106      	bne.n	80026a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	f023 0206 	bic.w	r2, r3, #6
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	645a      	str	r2, [r3, #68]	; 0x44
 80026a0:	e002      	b.n	80026a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b0:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_ADC_Start+0x160>)
 80026b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d129      	bne.n	800272c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e020      	b.n	800272c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a16      	ldr	r2, [pc, #88]	; (8002748 <HAL_ADC_Start+0x164>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d11b      	bne.n	800272c <HAL_ADC_Start+0x148>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d114      	bne.n	800272c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	e00b      	b.n	800272c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f043 0210 	orr.w	r2, r3, #16
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000008 	.word	0x20000008
 8002740:	431bde83 	.word	0x431bde83
 8002744:	40012300 	.word	0x40012300
 8002748:	40012000 	.word	0x40012000

0800274c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002768:	d113      	bne.n	8002792 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002778:	d10b      	bne.n	8002792 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e063      	b.n	800285a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002792:	f7ff fed7 	bl	8002544 <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002798:	e021      	b.n	80027de <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d01d      	beq.n	80027de <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <HAL_ADC_PollForConversion+0x6c>
 80027a8:	f7ff fecc 	bl	8002544 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d212      	bcs.n	80027de <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d00b      	beq.n	80027de <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f043 0204 	orr.w	r2, r3, #4
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e03d      	b.n	800285a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d1d6      	bne.n	800279a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0212 	mvn.w	r2, #18
 80027f4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d123      	bne.n	8002858 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11f      	bne.n	8002858 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002830:	2b00      	cmp	r3, #0
 8002832:	d111      	bne.n	8002858 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_ADC_Start_IT+0x1a>
 800287a:	2302      	movs	r3, #2
 800287c:	e0a1      	b.n	80029c2 <HAL_ADC_Start_IT+0x15e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d018      	beq.n	80028c6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028a4:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_ADC_Start_IT+0x16c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a4a      	ldr	r2, [pc, #296]	; (80029d4 <HAL_ADC_Start_IT+0x170>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0c9a      	lsrs	r2, r3, #18
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028b8:	e002      	b.n	80028c0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	3b01      	subs	r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f9      	bne.n	80028ba <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d169      	bne.n	80029a8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002912:	d106      	bne.n	8002922 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	f023 0206 	bic.w	r2, r3, #6
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	645a      	str	r2, [r3, #68]	; 0x44
 8002920:	e002      	b.n	8002928 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_ADC_Start_IT+0x174>)
 8002932:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800293c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800294c:	f043 0320 	orr.w	r3, r3, #32
 8002950:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10f      	bne.n	800297e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d129      	bne.n	80029c0 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	e020      	b.n	80029c0 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a16      	ldr	r2, [pc, #88]	; (80029dc <HAL_ADC_Start_IT+0x178>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d11b      	bne.n	80029c0 <HAL_ADC_Start_IT+0x15c>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d114      	bne.n	80029c0 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	e00b      	b.n	80029c0 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f043 0210 	orr.w	r2, r3, #16
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000008 	.word	0x20000008
 80029d4:	431bde83 	.word	0x431bde83
 80029d8:	40012300 	.word	0x40012300
 80029dc:	40012000 	.word	0x40012000

080029e0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d049      	beq.n	8002ab6 <HAL_ADC_IRQHandler+0xd6>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d046      	beq.n	8002ab6 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d12b      	bne.n	8002aa6 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d127      	bne.n	8002aa6 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d006      	beq.n	8002a72 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d119      	bne.n	8002aa6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0220 	bic.w	r2, r2, #32
 8002a80:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9d9 	bl	8002e5e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0212 	mvn.w	r2, #18
 8002ab4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b80      	cmp	r3, #128	; 0x80
 8002ad8:	bf0c      	ite	eq
 8002ada:	2301      	moveq	r3, #1
 8002adc:	2300      	movne	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d057      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x1b8>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d054      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d139      	bne.n	8002b88 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d12b      	bne.n	8002b88 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d124      	bne.n	8002b88 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d11d      	bne.n	8002b88 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d119      	bne.n	8002b88 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f043 0201 	orr.w	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fca1 	bl	80034d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f06f 020c 	mvn.w	r2, #12
 8002b96:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	bf0c      	ite	eq
 8002ba6:	2301      	moveq	r3, #1
 8002ba8:	2300      	movne	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d017      	beq.n	8002bfa <HAL_ADC_IRQHandler+0x21a>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d014      	beq.n	8002bfa <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d10d      	bne.n	8002bfa <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f94b 	bl	8002e86 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0201 	mvn.w	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d015      	beq.n	8002c5a <HAL_ADC_IRQHandler+0x27a>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d012      	beq.n	8002c5a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	f043 0202 	orr.w	r2, r3, #2
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0220 	mvn.w	r2, #32
 8002c48:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f925 	bl	8002e9a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0220 	mvn.w	r2, #32
 8002c58:	601a      	str	r2, [r3, #0]
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_Start_DMA+0x1e>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e0ce      	b.n	8002e20 <HAL_ADC_Start_DMA+0x1bc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d018      	beq.n	8002cca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca8:	4b5f      	ldr	r3, [pc, #380]	; (8002e28 <HAL_ADC_Start_DMA+0x1c4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a5f      	ldr	r2, [pc, #380]	; (8002e2c <HAL_ADC_Start_DMA+0x1c8>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	0c9a      	lsrs	r2, r3, #18
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002cbc:	e002      	b.n	8002cc4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f9      	bne.n	8002cbe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd8:	d107      	bne.n	8002cea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	f040 8086 	bne.w	8002e06 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d38:	d106      	bne.n	8002d48 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f023 0206 	bic.w	r2, r3, #6
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44
 8002d46:	e002      	b.n	8002d4e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_ADC_Start_DMA+0x1cc>)
 8002d58:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	4a35      	ldr	r2, [pc, #212]	; (8002e34 <HAL_ADC_Start_DMA+0x1d0>)
 8002d60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	4a34      	ldr	r2, [pc, #208]	; (8002e38 <HAL_ADC_Start_DMA+0x1d4>)
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	4a33      	ldr	r2, [pc, #204]	; (8002e3c <HAL_ADC_Start_DMA+0x1d8>)
 8002d70:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d8a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d9a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	334c      	adds	r3, #76	; 0x4c
 8002da6:	4619      	mov	r1, r3
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f000 fd5a 	bl	8003864 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10f      	bne.n	8002ddc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d129      	bne.n	8002e1e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	e020      	b.n	8002e1e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <HAL_ADC_Start_DMA+0x1dc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d11b      	bne.n	8002e1e <HAL_ADC_Start_DMA+0x1ba>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d114      	bne.n	8002e1e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	e00b      	b.n	8002e1e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000008 	.word	0x20000008
 8002e2c:	431bde83 	.word	0x431bde83
 8002e30:	40012300 	.word	0x40012300
 8002e34:	080033cd 	.word	0x080033cd
 8002e38:	08003487 	.word	0x08003487
 8002e3c:	080034a3 	.word	0x080034a3
 8002e40:	40012000 	.word	0x40012000

08002e44 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x1c>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e113      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x244>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b09      	cmp	r3, #9
 8002eda:	d925      	bls.n	8002f28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68d9      	ldr	r1, [r3, #12]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	3b1e      	subs	r3, #30
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	400a      	ands	r2, r1
 8002f00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68d9      	ldr	r1, [r3, #12]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	4603      	mov	r3, r0
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4403      	add	r3, r0
 8002f1a:	3b1e      	subs	r3, #30
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	e022      	b.n	8002f6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6919      	ldr	r1, [r3, #16]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	400a      	ands	r2, r1
 8002f4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6919      	ldr	r1, [r3, #16]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4403      	add	r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d824      	bhi.n	8002fc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	3b05      	subs	r3, #5
 8002f88:	221f      	movs	r2, #31
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	400a      	ands	r2, r1
 8002f96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	3b05      	subs	r3, #5
 8002fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002fbe:	e04c      	b.n	800305a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	d824      	bhi.n	8003012 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b23      	subs	r3, #35	; 0x23
 8002fda:	221f      	movs	r2, #31
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	3b23      	subs	r3, #35	; 0x23
 8003004:	fa00 f203 	lsl.w	r2, r0, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
 8003010:	e023      	b.n	800305a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	3b41      	subs	r3, #65	; 0x41
 8003024:	221f      	movs	r2, #31
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	400a      	ands	r2, r1
 8003032:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	4618      	mov	r0, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	3b41      	subs	r3, #65	; 0x41
 800304e:	fa00 f203 	lsl.w	r2, r0, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800305a:	4b29      	ldr	r3, [pc, #164]	; (8003100 <HAL_ADC_ConfigChannel+0x250>)
 800305c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a28      	ldr	r2, [pc, #160]	; (8003104 <HAL_ADC_ConfigChannel+0x254>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d10f      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x1d8>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b12      	cmp	r3, #18
 800306e:	d10b      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <HAL_ADC_ConfigChannel+0x254>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d12b      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x23a>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <HAL_ADC_ConfigChannel+0x258>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0x1f4>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b11      	cmp	r3, #17
 80030a2:	d122      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a11      	ldr	r2, [pc, #68]	; (8003108 <HAL_ADC_ConfigChannel+0x258>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d111      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030c6:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_ADC_ConfigChannel+0x25c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a11      	ldr	r2, [pc, #68]	; (8003110 <HAL_ADC_ConfigChannel+0x260>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	0c9a      	lsrs	r2, r3, #18
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030dc:	e002      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f9      	bne.n	80030de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40012300 	.word	0x40012300
 8003104:	40012000 	.word	0x40012000
 8003108:	10000012 	.word	0x10000012
 800310c:	20000008 	.word	0x20000008
 8003110:	431bde83 	.word	0x431bde83

08003114 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_ADC_AnalogWDGConfig+0x18>
 8003128:	2302      	movs	r3, #2
 800312a:	e04d      	b.n	80031c8 <HAL_ADC_AnalogWDGConfig+0xb4>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	7c1b      	ldrb	r3, [r3, #16]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d108      	bne.n	800314e <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	e007      	b.n	800315e <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800315c:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800316c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003170:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	6852      	ldr	r2, [r2, #4]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	6892      	ldr	r2, [r2, #8]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 021f 	bic.w	r2, r2, #31
 80031a6:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4619      	mov	r1, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031dc:	4b79      	ldr	r3, [pc, #484]	; (80033c4 <ADC_Init+0x1f0>)
 80031de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003208:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	021a      	lsls	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800322c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6899      	ldr	r1, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	4a58      	ldr	r2, [pc, #352]	; (80033c8 <ADC_Init+0x1f4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d022      	beq.n	80032b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800327a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6899      	ldr	r1, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800329c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6899      	ldr	r1, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	e00f      	b.n	80032d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0202 	bic.w	r2, r2, #2
 80032e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6899      	ldr	r1, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7e1b      	ldrb	r3, [r3, #24]
 80032ec:	005a      	lsls	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01b      	beq.n	8003338 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800331e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	3b01      	subs	r3, #1
 800332c:	035a      	lsls	r2, r3, #13
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	e007      	b.n	8003348 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003346:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	3b01      	subs	r3, #1
 8003364:	051a      	lsls	r2, r3, #20
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800337c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6899      	ldr	r1, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800338a:	025a      	lsls	r2, r3, #9
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6899      	ldr	r1, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	029a      	lsls	r2, r3, #10
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	40012300 	.word	0x40012300
 80033c8:	0f000001 	.word	0x0f000001

080033cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d13c      	bne.n	8003460 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d12b      	bne.n	8003458 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003404:	2b00      	cmp	r3, #0
 8003406:	d127      	bne.n	8003458 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003412:	2b00      	cmp	r3, #0
 8003414:	d006      	beq.n	8003424 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003420:	2b00      	cmp	r3, #0
 8003422:	d119      	bne.n	8003458 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0220 	bic.w	r2, r2, #32
 8003432:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f043 0201 	orr.w	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7ff fd00 	bl	8002e5e <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800345e:	e00e      	b.n	800347e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7ff fd14 	bl	8002e9a <HAL_ADC_ErrorCallback>
}
 8003472:	e004      	b.n	800347e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7ff fcec 	bl	8002e72 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2240      	movs	r2, #64	; 0x40
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	f043 0204 	orr.w	r2, r3, #4
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff fce9 	bl	8002e9a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <__NVIC_SetPriorityGrouping+0x44>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003500:	4013      	ands	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800350c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003516:	4a04      	ldr	r2, [pc, #16]	; (8003528 <__NVIC_SetPriorityGrouping+0x44>)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	60d3      	str	r3, [r2, #12]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <__NVIC_GetPriorityGrouping+0x18>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	f003 0307 	and.w	r3, r3, #7
}
 800353a:	4618      	mov	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	2b00      	cmp	r3, #0
 8003558:	db0b      	blt.n	8003572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	f003 021f 	and.w	r2, r3, #31
 8003560:	4907      	ldr	r1, [pc, #28]	; (8003580 <__NVIC_EnableIRQ+0x38>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2001      	movs	r0, #1
 800356a:	fa00 f202 	lsl.w	r2, r0, r2
 800356e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	e000e100 	.word	0xe000e100

08003584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	6039      	str	r1, [r7, #0]
 800358e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	2b00      	cmp	r3, #0
 8003596:	db0a      	blt.n	80035ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	490c      	ldr	r1, [pc, #48]	; (80035d0 <__NVIC_SetPriority+0x4c>)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	0112      	lsls	r2, r2, #4
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	440b      	add	r3, r1
 80035a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035ac:	e00a      	b.n	80035c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4908      	ldr	r1, [pc, #32]	; (80035d4 <__NVIC_SetPriority+0x50>)
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	3b04      	subs	r3, #4
 80035bc:	0112      	lsls	r2, r2, #4
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	440b      	add	r3, r1
 80035c2:	761a      	strb	r2, [r3, #24]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000e100 	.word	0xe000e100
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	; 0x24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f1c3 0307 	rsb	r3, r3, #7
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	bf28      	it	cs
 80035f6:	2304      	movcs	r3, #4
 80035f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2b06      	cmp	r3, #6
 8003600:	d902      	bls.n	8003608 <NVIC_EncodePriority+0x30>
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3b03      	subs	r3, #3
 8003606:	e000      	b.n	800360a <NVIC_EncodePriority+0x32>
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360c:	f04f 32ff 	mov.w	r2, #4294967295
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	401a      	ands	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003620:	f04f 31ff 	mov.w	r1, #4294967295
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	fa01 f303 	lsl.w	r3, r1, r3
 800362a:	43d9      	mvns	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	4313      	orrs	r3, r2
         );
}
 8003632:	4618      	mov	r0, r3
 8003634:	3724      	adds	r7, #36	; 0x24
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3b01      	subs	r3, #1
 800364c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003650:	d301      	bcc.n	8003656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003652:	2301      	movs	r3, #1
 8003654:	e00f      	b.n	8003676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003656:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <SysTick_Config+0x40>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3b01      	subs	r3, #1
 800365c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800365e:	210f      	movs	r1, #15
 8003660:	f04f 30ff 	mov.w	r0, #4294967295
 8003664:	f7ff ff8e 	bl	8003584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <SysTick_Config+0x40>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <SysTick_Config+0x40>)
 8003670:	2207      	movs	r2, #7
 8003672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	e000e010 	.word	0xe000e010

08003684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ff29 	bl	80034e4 <__NVIC_SetPriorityGrouping>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036ac:	f7ff ff3e 	bl	800352c <__NVIC_GetPriorityGrouping>
 80036b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f7ff ff8e 	bl	80035d8 <NVIC_EncodePriority>
 80036bc:	4602      	mov	r2, r0
 80036be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff5d 	bl	8003584 <__NVIC_SetPriority>
}
 80036ca:	bf00      	nop
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	4603      	mov	r3, r0
 80036da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff31 	bl	8003548 <__NVIC_EnableIRQ>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ffa2 	bl	8003640 <SysTick_Config>
 80036fc:	4603      	mov	r3, r0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7fe ff16 	bl	8002544 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e099      	b.n	8003858 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003744:	e00f      	b.n	8003766 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003746:	f7fe fefd 	bl	8002544 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b05      	cmp	r3, #5
 8003752:	d908      	bls.n	8003766 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2203      	movs	r2, #3
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e078      	b.n	8003858 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e8      	bne.n	8003746 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4b38      	ldr	r3, [pc, #224]	; (8003860 <HAL_DMA_Init+0x158>)
 8003780:	4013      	ands	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003792:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d107      	bne.n	80037d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	4313      	orrs	r3, r2
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f023 0307 	bic.w	r3, r3, #7
 80037e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d117      	bne.n	800382a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00e      	beq.n	800382a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fa6f 	bl	8003cf0 <DMA_CheckFifoParam>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2240      	movs	r2, #64	; 0x40
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003826:	2301      	movs	r3, #1
 8003828:	e016      	b.n	8003858 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fa26 	bl	8003c84 <DMA_CalcBaseAndBitshift>
 8003838:	4603      	mov	r3, r0
 800383a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003840:	223f      	movs	r2, #63	; 0x3f
 8003842:	409a      	lsls	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	f010803f 	.word	0xf010803f

08003864 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_DMA_Start_IT+0x26>
 8003886:	2302      	movs	r3, #2
 8003888:	e040      	b.n	800390c <HAL_DMA_Start_IT+0xa8>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d12f      	bne.n	80038fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f9b8 	bl	8003c28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	223f      	movs	r2, #63	; 0x3f
 80038be:	409a      	lsls	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0216 	orr.w	r2, r2, #22
 80038d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0208 	orr.w	r2, r2, #8
 80038ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e005      	b.n	800390a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003906:	2302      	movs	r3, #2
 8003908:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800390a:	7dfb      	ldrb	r3, [r7, #23]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003920:	4b92      	ldr	r3, [pc, #584]	; (8003b6c <HAL_DMA_IRQHandler+0x258>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a92      	ldr	r2, [pc, #584]	; (8003b70 <HAL_DMA_IRQHandler+0x25c>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	0a9b      	lsrs	r3, r3, #10
 800392c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	2208      	movs	r2, #8
 8003940:	409a      	lsls	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01a      	beq.n	8003980 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d013      	beq.n	8003980 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0204 	bic.w	r2, r2, #4
 8003966:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	2208      	movs	r2, #8
 800396e:	409a      	lsls	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	f043 0201 	orr.w	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	2201      	movs	r2, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d012      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	2201      	movs	r2, #1
 80039a4:	409a      	lsls	r2, r3
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f043 0202 	orr.w	r2, r3, #2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ba:	2204      	movs	r2, #4
 80039bc:	409a      	lsls	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d012      	beq.n	80039ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	2204      	movs	r2, #4
 80039da:	409a      	lsls	r2, r3
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e4:	f043 0204 	orr.w	r2, r3, #4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f0:	2210      	movs	r2, #16
 80039f2:	409a      	lsls	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d043      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d03c      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0e:	2210      	movs	r2, #16
 8003a10:	409a      	lsls	r2, r3
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d018      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d108      	bne.n	8003a44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d024      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4798      	blx	r3
 8003a42:	e01f      	b.n	8003a84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01b      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3
 8003a54:	e016      	b.n	8003a84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0208 	bic.w	r2, r2, #8
 8003a72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	2220      	movs	r2, #32
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 808e 	beq.w	8003bb2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8086 	beq.w	8003bb2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aaa:	2220      	movs	r2, #32
 8003aac:	409a      	lsls	r2, r3
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b05      	cmp	r3, #5
 8003abc:	d136      	bne.n	8003b2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0216 	bic.w	r2, r2, #22
 8003acc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003adc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <HAL_DMA_IRQHandler+0x1da>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0208 	bic.w	r2, r2, #8
 8003afc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b02:	223f      	movs	r2, #63	; 0x3f
 8003b04:	409a      	lsls	r2, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d07d      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
        }
        return;
 8003b2a:	e078      	b.n	8003c1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01c      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d108      	bne.n	8003b5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d030      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
 8003b58:	e02b      	b.n	8003bb2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d027      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
 8003b6a:	e022      	b.n	8003bb2 <HAL_DMA_IRQHandler+0x29e>
 8003b6c:	20000008 	.word	0x20000008
 8003b70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0210 	bic.w	r2, r2, #16
 8003b90:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d032      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d022      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2205      	movs	r2, #5
 8003bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3301      	adds	r3, #1
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d307      	bcc.n	8003bfa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f2      	bne.n	8003bde <HAL_DMA_IRQHandler+0x2ca>
 8003bf8:	e000      	b.n	8003bfc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003bfa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
 8003c1c:	e000      	b.n	8003c20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c1e:	bf00      	nop
    }
  }
}
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop

08003c28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d108      	bne.n	8003c68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c66:	e007      	b.n	8003c78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	60da      	str	r2, [r3, #12]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	3b10      	subs	r3, #16
 8003c94:	4a14      	ldr	r2, [pc, #80]	; (8003ce8 <DMA_CalcBaseAndBitshift+0x64>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c9e:	4a13      	ldr	r2, [pc, #76]	; (8003cec <DMA_CalcBaseAndBitshift+0x68>)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d909      	bls.n	8003cc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	1d1a      	adds	r2, r3, #4
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	659a      	str	r2, [r3, #88]	; 0x58
 8003cc4:	e007      	b.n	8003cd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	aaaaaaab 	.word	0xaaaaaaab
 8003cec:	08006e88 	.word	0x08006e88

08003cf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d11f      	bne.n	8003d4a <DMA_CheckFifoParam+0x5a>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d856      	bhi.n	8003dbe <DMA_CheckFifoParam+0xce>
 8003d10:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <DMA_CheckFifoParam+0x28>)
 8003d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d16:	bf00      	nop
 8003d18:	08003d29 	.word	0x08003d29
 8003d1c:	08003d3b 	.word	0x08003d3b
 8003d20:	08003d29 	.word	0x08003d29
 8003d24:	08003dbf 	.word	0x08003dbf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d046      	beq.n	8003dc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d38:	e043      	b.n	8003dc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d42:	d140      	bne.n	8003dc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d48:	e03d      	b.n	8003dc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d52:	d121      	bne.n	8003d98 <DMA_CheckFifoParam+0xa8>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d837      	bhi.n	8003dca <DMA_CheckFifoParam+0xda>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <DMA_CheckFifoParam+0x70>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d71 	.word	0x08003d71
 8003d64:	08003d77 	.word	0x08003d77
 8003d68:	08003d71 	.word	0x08003d71
 8003d6c:	08003d89 	.word	0x08003d89
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
      break;
 8003d74:	e030      	b.n	8003dd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d025      	beq.n	8003dce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d86:	e022      	b.n	8003dce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d90:	d11f      	bne.n	8003dd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d96:	e01c      	b.n	8003dd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d903      	bls.n	8003da6 <DMA_CheckFifoParam+0xb6>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d003      	beq.n	8003dac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003da4:	e018      	b.n	8003dd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
      break;
 8003daa:	e015      	b.n	8003dd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00e      	beq.n	8003dd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      break;
 8003dbc:	e00b      	b.n	8003dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8003dbe:	bf00      	nop
 8003dc0:	e00a      	b.n	8003dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003dc2:	bf00      	nop
 8003dc4:	e008      	b.n	8003dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003dc6:	bf00      	nop
 8003dc8:	e006      	b.n	8003dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e004      	b.n	8003dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e002      	b.n	8003dd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dd2:	bf00      	nop
 8003dd4:	e000      	b.n	8003dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd6:	bf00      	nop
    }
  } 
  
  return status; 
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop

08003de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	e159      	b.n	80040b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e04:	2201      	movs	r2, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	f040 8148 	bne.w	80040b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d005      	beq.n	8003e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d130      	bne.n	8003e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	2203      	movs	r2, #3
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e70:	2201      	movs	r2, #1
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 0201 	and.w	r2, r3, #1
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d017      	beq.n	8003ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d123      	bne.n	8003f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	08da      	lsrs	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3208      	adds	r2, #8
 8003eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	220f      	movs	r2, #15
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	08da      	lsrs	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3208      	adds	r2, #8
 8003f26:	69b9      	ldr	r1, [r7, #24]
 8003f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	2203      	movs	r2, #3
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 0203 	and.w	r2, r3, #3
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80a2 	beq.w	80040b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	4b57      	ldr	r3, [pc, #348]	; (80040d0 <HAL_GPIO_Init+0x2e8>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	4a56      	ldr	r2, [pc, #344]	; (80040d0 <HAL_GPIO_Init+0x2e8>)
 8003f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7e:	4b54      	ldr	r3, [pc, #336]	; (80040d0 <HAL_GPIO_Init+0x2e8>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f8a:	4a52      	ldr	r2, [pc, #328]	; (80040d4 <HAL_GPIO_Init+0x2ec>)
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	089b      	lsrs	r3, r3, #2
 8003f90:	3302      	adds	r3, #2
 8003f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	220f      	movs	r2, #15
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a49      	ldr	r2, [pc, #292]	; (80040d8 <HAL_GPIO_Init+0x2f0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d019      	beq.n	8003fea <HAL_GPIO_Init+0x202>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a48      	ldr	r2, [pc, #288]	; (80040dc <HAL_GPIO_Init+0x2f4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d013      	beq.n	8003fe6 <HAL_GPIO_Init+0x1fe>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a47      	ldr	r2, [pc, #284]	; (80040e0 <HAL_GPIO_Init+0x2f8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00d      	beq.n	8003fe2 <HAL_GPIO_Init+0x1fa>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a46      	ldr	r2, [pc, #280]	; (80040e4 <HAL_GPIO_Init+0x2fc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d007      	beq.n	8003fde <HAL_GPIO_Init+0x1f6>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a45      	ldr	r2, [pc, #276]	; (80040e8 <HAL_GPIO_Init+0x300>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d101      	bne.n	8003fda <HAL_GPIO_Init+0x1f2>
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	e008      	b.n	8003fec <HAL_GPIO_Init+0x204>
 8003fda:	2307      	movs	r3, #7
 8003fdc:	e006      	b.n	8003fec <HAL_GPIO_Init+0x204>
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e004      	b.n	8003fec <HAL_GPIO_Init+0x204>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e002      	b.n	8003fec <HAL_GPIO_Init+0x204>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_GPIO_Init+0x204>
 8003fea:	2300      	movs	r3, #0
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	f002 0203 	and.w	r2, r2, #3
 8003ff2:	0092      	lsls	r2, r2, #2
 8003ff4:	4093      	lsls	r3, r2
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ffc:	4935      	ldr	r1, [pc, #212]	; (80040d4 <HAL_GPIO_Init+0x2ec>)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	089b      	lsrs	r3, r3, #2
 8004002:	3302      	adds	r3, #2
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800400a:	4b38      	ldr	r3, [pc, #224]	; (80040ec <HAL_GPIO_Init+0x304>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	43db      	mvns	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4013      	ands	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800402e:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <HAL_GPIO_Init+0x304>)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004034:	4b2d      	ldr	r3, [pc, #180]	; (80040ec <HAL_GPIO_Init+0x304>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	43db      	mvns	r3, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004058:	4a24      	ldr	r2, [pc, #144]	; (80040ec <HAL_GPIO_Init+0x304>)
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800405e:	4b23      	ldr	r3, [pc, #140]	; (80040ec <HAL_GPIO_Init+0x304>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004082:	4a1a      	ldr	r2, [pc, #104]	; (80040ec <HAL_GPIO_Init+0x304>)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004088:	4b18      	ldr	r3, [pc, #96]	; (80040ec <HAL_GPIO_Init+0x304>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	43db      	mvns	r3, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4013      	ands	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040ac:	4a0f      	ldr	r2, [pc, #60]	; (80040ec <HAL_GPIO_Init+0x304>)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3301      	adds	r3, #1
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b0f      	cmp	r3, #15
 80040bc:	f67f aea2 	bls.w	8003e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	3724      	adds	r7, #36	; 0x24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40013800 	.word	0x40013800
 80040d8:	40020000 	.word	0x40020000
 80040dc:	40020400 	.word	0x40020400
 80040e0:	40020800 	.word	0x40020800
 80040e4:	40020c00 	.word	0x40020c00
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40013c00 	.word	0x40013c00

080040f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	887b      	ldrh	r3, [r7, #2]
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
 800410c:	e001      	b.n	8004112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004112:	7bfb      	ldrb	r3, [r7, #15]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
 800412c:	4613      	mov	r3, r2
 800412e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004130:	787b      	ldrb	r3, [r7, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800413c:	e003      	b.n	8004146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800413e:	887b      	ldrh	r3, [r7, #2]
 8004140:	041a      	lsls	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	619a      	str	r2, [r3, #24]
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d006      	beq.n	8004178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800416a:	4a05      	ldr	r2, [pc, #20]	; (8004180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fd fe6a 	bl	8001e4c <HAL_GPIO_EXTI_Callback>
  }
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40013c00 	.word	0x40013c00

08004184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e264      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d075      	beq.n	800428e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041a2:	4ba3      	ldr	r3, [pc, #652]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d00c      	beq.n	80041c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ae:	4ba0      	ldr	r3, [pc, #640]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d112      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ba:	4b9d      	ldr	r3, [pc, #628]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c6:	d10b      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	4b99      	ldr	r3, [pc, #612]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d05b      	beq.n	800428c <HAL_RCC_OscConfig+0x108>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d157      	bne.n	800428c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e23f      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e8:	d106      	bne.n	80041f8 <HAL_RCC_OscConfig+0x74>
 80041ea:	4b91      	ldr	r3, [pc, #580]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a90      	ldr	r2, [pc, #576]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e01d      	b.n	8004234 <HAL_RCC_OscConfig+0xb0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x98>
 8004202:	4b8b      	ldr	r3, [pc, #556]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a8a      	ldr	r2, [pc, #552]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b88      	ldr	r3, [pc, #544]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a87      	ldr	r2, [pc, #540]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e00b      	b.n	8004234 <HAL_RCC_OscConfig+0xb0>
 800421c:	4b84      	ldr	r3, [pc, #528]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a83      	ldr	r2, [pc, #524]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4b81      	ldr	r3, [pc, #516]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a80      	ldr	r2, [pc, #512]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 800422e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d013      	beq.n	8004264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fe f982 	bl	8002544 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fe f97e 	bl	8002544 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e204      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	4b76      	ldr	r3, [pc, #472]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0xc0>
 8004262:	e014      	b.n	800428e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fe f96e 	bl	8002544 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800426c:	f7fe f96a 	bl	8002544 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e1f0      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427e:	4b6c      	ldr	r3, [pc, #432]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0xe8>
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d063      	beq.n	8004362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800429a:	4b65      	ldr	r3, [pc, #404]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a6:	4b62      	ldr	r3, [pc, #392]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d11c      	bne.n	80042ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b2:	4b5f      	ldr	r3, [pc, #380]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d116      	bne.n	80042ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	4b5c      	ldr	r3, [pc, #368]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_RCC_OscConfig+0x152>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d001      	beq.n	80042d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e1c4      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b56      	ldr	r3, [pc, #344]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4952      	ldr	r1, [pc, #328]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ea:	e03a      	b.n	8004362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d020      	beq.n	8004336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f4:	4b4f      	ldr	r3, [pc, #316]	; (8004434 <HAL_RCC_OscConfig+0x2b0>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fe f923 	bl	8002544 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004302:	f7fe f91f 	bl	8002544 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e1a5      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004314:	4b46      	ldr	r3, [pc, #280]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	4b43      	ldr	r3, [pc, #268]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4940      	ldr	r1, [pc, #256]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]
 8004334:	e015      	b.n	8004362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004336:	4b3f      	ldr	r3, [pc, #252]	; (8004434 <HAL_RCC_OscConfig+0x2b0>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fe f902 	bl	8002544 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004344:	f7fe f8fe 	bl	8002544 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e184      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004356:	4b36      	ldr	r3, [pc, #216]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d030      	beq.n	80043d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004376:	4b30      	ldr	r3, [pc, #192]	; (8004438 <HAL_RCC_OscConfig+0x2b4>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fe f8e2 	bl	8002544 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004384:	f7fe f8de 	bl	8002544 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e164      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004396:	4b26      	ldr	r3, [pc, #152]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x200>
 80043a2:	e015      	b.n	80043d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a4:	4b24      	ldr	r3, [pc, #144]	; (8004438 <HAL_RCC_OscConfig+0x2b4>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043aa:	f7fe f8cb 	bl	8002544 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b2:	f7fe f8c7 	bl	8002544 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e14d      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c4:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80043c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80a0 	beq.w	800451e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e2:	4b13      	ldr	r3, [pc, #76]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10f      	bne.n	800440e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	4a0e      	ldr	r2, [pc, #56]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fc:	6413      	str	r3, [r2, #64]	; 0x40
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800440a:	2301      	movs	r3, #1
 800440c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_RCC_OscConfig+0x2b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d121      	bne.n	800445e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <HAL_RCC_OscConfig+0x2b8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a07      	ldr	r2, [pc, #28]	; (800443c <HAL_RCC_OscConfig+0x2b8>)
 8004420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004426:	f7fe f88d 	bl	8002544 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442c:	e011      	b.n	8004452 <HAL_RCC_OscConfig+0x2ce>
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	42470000 	.word	0x42470000
 8004438:	42470e80 	.word	0x42470e80
 800443c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004440:	f7fe f880 	bl	8002544 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e106      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004452:	4b85      	ldr	r3, [pc, #532]	; (8004668 <HAL_RCC_OscConfig+0x4e4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d106      	bne.n	8004474 <HAL_RCC_OscConfig+0x2f0>
 8004466:	4b81      	ldr	r3, [pc, #516]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	4a80      	ldr	r2, [pc, #512]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6713      	str	r3, [r2, #112]	; 0x70
 8004472:	e01c      	b.n	80044ae <HAL_RCC_OscConfig+0x32a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b05      	cmp	r3, #5
 800447a:	d10c      	bne.n	8004496 <HAL_RCC_OscConfig+0x312>
 800447c:	4b7b      	ldr	r3, [pc, #492]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	4a7a      	ldr	r2, [pc, #488]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	6713      	str	r3, [r2, #112]	; 0x70
 8004488:	4b78      	ldr	r3, [pc, #480]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	4a77      	ldr	r2, [pc, #476]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6713      	str	r3, [r2, #112]	; 0x70
 8004494:	e00b      	b.n	80044ae <HAL_RCC_OscConfig+0x32a>
 8004496:	4b75      	ldr	r3, [pc, #468]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	4a74      	ldr	r2, [pc, #464]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	6713      	str	r3, [r2, #112]	; 0x70
 80044a2:	4b72      	ldr	r3, [pc, #456]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	4a71      	ldr	r2, [pc, #452]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d015      	beq.n	80044e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b6:	f7fe f845 	bl	8002544 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044bc:	e00a      	b.n	80044d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fe f841 	bl	8002544 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e0c5      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	4b65      	ldr	r3, [pc, #404]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ee      	beq.n	80044be <HAL_RCC_OscConfig+0x33a>
 80044e0:	e014      	b.n	800450c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e2:	f7fe f82f 	bl	8002544 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e8:	e00a      	b.n	8004500 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fe f82b 	bl	8002544 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e0af      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004500:	4b5a      	ldr	r3, [pc, #360]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ee      	bne.n	80044ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d105      	bne.n	800451e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004512:	4b56      	ldr	r3, [pc, #344]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	4a55      	ldr	r2, [pc, #340]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 809b 	beq.w	800465e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004528:	4b50      	ldr	r3, [pc, #320]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 030c 	and.w	r3, r3, #12
 8004530:	2b08      	cmp	r3, #8
 8004532:	d05c      	beq.n	80045ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d141      	bne.n	80045c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453c:	4b4c      	ldr	r3, [pc, #304]	; (8004670 <HAL_RCC_OscConfig+0x4ec>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004542:	f7fd ffff 	bl	8002544 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800454a:	f7fd fffb 	bl	8002544 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e081      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455c:	4b43      	ldr	r3, [pc, #268]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f0      	bne.n	800454a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	019b      	lsls	r3, r3, #6
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	3b01      	subs	r3, #1
 8004582:	041b      	lsls	r3, r3, #16
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	061b      	lsls	r3, r3, #24
 800458c:	4937      	ldr	r1, [pc, #220]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 800458e:	4313      	orrs	r3, r2
 8004590:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004592:	4b37      	ldr	r3, [pc, #220]	; (8004670 <HAL_RCC_OscConfig+0x4ec>)
 8004594:	2201      	movs	r2, #1
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fd ffd4 	bl	8002544 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fd ffd0 	bl	8002544 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e056      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b2:	4b2e      	ldr	r3, [pc, #184]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x41c>
 80045be:	e04e      	b.n	800465e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c0:	4b2b      	ldr	r3, [pc, #172]	; (8004670 <HAL_RCC_OscConfig+0x4ec>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c6:	f7fd ffbd 	bl	8002544 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ce:	f7fd ffb9 	bl	8002544 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e03f      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e0:	4b22      	ldr	r3, [pc, #136]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f0      	bne.n	80045ce <HAL_RCC_OscConfig+0x44a>
 80045ec:	e037      	b.n	800465e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e032      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045fa:	4b1c      	ldr	r3, [pc, #112]	; (800466c <HAL_RCC_OscConfig+0x4e8>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d028      	beq.n	800465a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d121      	bne.n	800465a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d11a      	bne.n	800465a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800462a:	4013      	ands	r3, r2
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004630:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004632:	4293      	cmp	r3, r2
 8004634:	d111      	bne.n	800465a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	3b01      	subs	r3, #1
 8004644:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d107      	bne.n	800465a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40007000 	.word	0x40007000
 800466c:	40023800 	.word	0x40023800
 8004670:	42470060 	.word	0x42470060

08004674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0cc      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004688:	4b68      	ldr	r3, [pc, #416]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d90c      	bls.n	80046b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b65      	ldr	r3, [pc, #404]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b63      	ldr	r3, [pc, #396]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0b8      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d020      	beq.n	80046fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046c8:	4b59      	ldr	r3, [pc, #356]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a58      	ldr	r2, [pc, #352]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046e0:	4b53      	ldr	r3, [pc, #332]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a52      	ldr	r2, [pc, #328]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ec:	4b50      	ldr	r3, [pc, #320]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	494d      	ldr	r1, [pc, #308]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d044      	beq.n	8004794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d119      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e07f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d003      	beq.n	8004732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800472e:	2b03      	cmp	r3, #3
 8004730:	d107      	bne.n	8004742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004732:	4b3f      	ldr	r3, [pc, #252]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e06f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004742:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e067      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004752:	4b37      	ldr	r3, [pc, #220]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f023 0203 	bic.w	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4934      	ldr	r1, [pc, #208]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	4313      	orrs	r3, r2
 8004762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004764:	f7fd feee 	bl	8002544 <HAL_GetTick>
 8004768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476a:	e00a      	b.n	8004782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476c:	f7fd feea 	bl	8002544 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	; 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e04f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 020c 	and.w	r2, r3, #12
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	429a      	cmp	r2, r3
 8004792:	d1eb      	bne.n	800476c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d20c      	bcs.n	80047bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	4b20      	ldr	r3, [pc, #128]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e032      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c8:	4b19      	ldr	r3, [pc, #100]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4916      	ldr	r1, [pc, #88]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047e6:	4b12      	ldr	r3, [pc, #72]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	490e      	ldr	r1, [pc, #56]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047fa:	f000 f821 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 80047fe:	4602      	mov	r2, r0
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	490a      	ldr	r1, [pc, #40]	; (8004834 <HAL_RCC_ClockConfig+0x1c0>)
 800480c:	5ccb      	ldrb	r3, [r1, r3]
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	4a09      	ldr	r2, [pc, #36]	; (8004838 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004816:	4b09      	ldr	r3, [pc, #36]	; (800483c <HAL_RCC_ClockConfig+0x1c8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fd fe4e 	bl	80024bc <HAL_InitTick>

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023c00 	.word	0x40023c00
 8004830:	40023800 	.word	0x40023800
 8004834:	08006e70 	.word	0x08006e70
 8004838:	20000008 	.word	0x20000008
 800483c:	2000000c 	.word	0x2000000c

08004840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	2300      	movs	r3, #0
 8004852:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004858:	4b67      	ldr	r3, [pc, #412]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d00d      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0x40>
 8004864:	2b08      	cmp	r3, #8
 8004866:	f200 80bd 	bhi.w	80049e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0x34>
 800486e:	2b04      	cmp	r3, #4
 8004870:	d003      	beq.n	800487a <HAL_RCC_GetSysClockFreq+0x3a>
 8004872:	e0b7      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004874:	4b61      	ldr	r3, [pc, #388]	; (80049fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004876:	60bb      	str	r3, [r7, #8]
       break;
 8004878:	e0b7      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800487a:	4b61      	ldr	r3, [pc, #388]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800487c:	60bb      	str	r3, [r7, #8]
      break;
 800487e:	e0b4      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004880:	4b5d      	ldr	r3, [pc, #372]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004888:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800488a:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d04d      	beq.n	8004932 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004896:	4b58      	ldr	r3, [pc, #352]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	099b      	lsrs	r3, r3, #6
 800489c:	461a      	mov	r2, r3
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048a6:	f04f 0100 	mov.w	r1, #0
 80048aa:	ea02 0800 	and.w	r8, r2, r0
 80048ae:	ea03 0901 	and.w	r9, r3, r1
 80048b2:	4640      	mov	r0, r8
 80048b4:	4649      	mov	r1, r9
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	014b      	lsls	r3, r1, #5
 80048c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048c4:	0142      	lsls	r2, r0, #5
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	ebb0 0008 	subs.w	r0, r0, r8
 80048ce:	eb61 0109 	sbc.w	r1, r1, r9
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	018b      	lsls	r3, r1, #6
 80048dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048e0:	0182      	lsls	r2, r0, #6
 80048e2:	1a12      	subs	r2, r2, r0
 80048e4:	eb63 0301 	sbc.w	r3, r3, r1
 80048e8:	f04f 0000 	mov.w	r0, #0
 80048ec:	f04f 0100 	mov.w	r1, #0
 80048f0:	00d9      	lsls	r1, r3, #3
 80048f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048f6:	00d0      	lsls	r0, r2, #3
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	eb12 0208 	adds.w	r2, r2, r8
 8004900:	eb43 0309 	adc.w	r3, r3, r9
 8004904:	f04f 0000 	mov.w	r0, #0
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	0259      	lsls	r1, r3, #9
 800490e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004912:	0250      	lsls	r0, r2, #9
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	461a      	mov	r2, r3
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	f7fc f8ea 	bl	8000afc <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4613      	mov	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e04a      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004932:	4b31      	ldr	r3, [pc, #196]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	461a      	mov	r2, r3
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	ea02 0400 	and.w	r4, r2, r0
 800494a:	ea03 0501 	and.w	r5, r3, r1
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	014b      	lsls	r3, r1, #5
 800495c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004960:	0142      	lsls	r2, r0, #5
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	1b00      	subs	r0, r0, r4
 8004968:	eb61 0105 	sbc.w	r1, r1, r5
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	018b      	lsls	r3, r1, #6
 8004976:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800497a:	0182      	lsls	r2, r0, #6
 800497c:	1a12      	subs	r2, r2, r0
 800497e:	eb63 0301 	sbc.w	r3, r3, r1
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f04f 0100 	mov.w	r1, #0
 800498a:	00d9      	lsls	r1, r3, #3
 800498c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004990:	00d0      	lsls	r0, r2, #3
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	1912      	adds	r2, r2, r4
 8004998:	eb45 0303 	adc.w	r3, r5, r3
 800499c:	f04f 0000 	mov.w	r0, #0
 80049a0:	f04f 0100 	mov.w	r1, #0
 80049a4:	0299      	lsls	r1, r3, #10
 80049a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049aa:	0290      	lsls	r0, r2, #10
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	f7fc f89e 	bl	8000afc <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4613      	mov	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	3301      	adds	r3, #1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	60bb      	str	r3, [r7, #8]
      break;
 80049e2:	e002      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049e6:	60bb      	str	r3, [r7, #8]
      break;
 80049e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ea:	68bb      	ldr	r3, [r7, #8]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800
 80049fc:	00f42400 	.word	0x00f42400
 8004a00:	007a1200 	.word	0x007a1200

08004a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000008 	.word	0x20000008

08004a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a20:	f7ff fff0 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	0a9b      	lsrs	r3, r3, #10
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4903      	ldr	r1, [pc, #12]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	08006e80 	.word	0x08006e80

08004a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a48:	f7ff ffdc 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0b5b      	lsrs	r3, r3, #13
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4903      	ldr	r1, [pc, #12]	; (8004a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40023800 	.word	0x40023800
 8004a68:	08006e80 	.word	0x08006e80

08004a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e07b      	b.n	8004b76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d108      	bne.n	8004a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a8e:	d009      	beq.n	8004aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	61da      	str	r2, [r3, #28]
 8004a96:	e005      	b.n	8004aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fd fa88 	bl	8001fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ada:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b28:	ea42 0103 	orr.w	r1, r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	f003 0104 	and.w	r1, r3, #4
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	f003 0210 	and.w	r2, r3, #16
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b08c      	sub	sp, #48	; 0x30
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_SPI_TransmitReceive+0x26>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e18a      	b.n	8004eba <HAL_SPI_TransmitReceive+0x33c>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bac:	f7fd fcca 	bl	8002544 <HAL_GetTick>
 8004bb0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004bc2:	887b      	ldrh	r3, [r7, #2]
 8004bc4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d00f      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x70>
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bd4:	d107      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d103      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x68>
 8004bde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d003      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
 8004be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bec:	e15b      	b.n	8004ea6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x82>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x82>
 8004bfa:	887b      	ldrh	r3, [r7, #2]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d103      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c06:	e14e      	b.n	8004ea6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d003      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2205      	movs	r2, #5
 8004c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	887a      	ldrh	r2, [r7, #2]
 8004c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	887a      	ldrh	r2, [r7, #2]
 8004c32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	887a      	ldrh	r2, [r7, #2]
 8004c3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	887a      	ldrh	r2, [r7, #2]
 8004c44:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	d007      	beq.n	8004c70 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c78:	d178      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_SPI_TransmitReceive+0x10a>
 8004c82:	8b7b      	ldrh	r3, [r7, #26]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d166      	bne.n	8004d56 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	881a      	ldrh	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	1c9a      	adds	r2, r3, #2
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cac:	e053      	b.n	8004d56 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d11b      	bne.n	8004cf4 <HAL_SPI_TransmitReceive+0x176>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0x176>
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d113      	bne.n	8004cf4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	881a      	ldrh	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	1c9a      	adds	r2, r3, #2
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d119      	bne.n	8004d36 <HAL_SPI_TransmitReceive+0x1b8>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d014      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	b292      	uxth	r2, r2
 8004d18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	1c9a      	adds	r2, r3, #2
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d32:	2301      	movs	r3, #1
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d36:	f7fd fc05 	bl	8002544 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d807      	bhi.n	8004d56 <HAL_SPI_TransmitReceive+0x1d8>
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d003      	beq.n	8004d56 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d54:	e0a7      	b.n	8004ea6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1a6      	bne.n	8004cae <HAL_SPI_TransmitReceive+0x130>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1a1      	bne.n	8004cae <HAL_SPI_TransmitReceive+0x130>
 8004d6a:	e07c      	b.n	8004e66 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_SPI_TransmitReceive+0x1fc>
 8004d74:	8b7b      	ldrh	r3, [r7, #26]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d16b      	bne.n	8004e52 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	7812      	ldrb	r2, [r2, #0]
 8004d86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da0:	e057      	b.n	8004e52 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d11c      	bne.n	8004dea <HAL_SPI_TransmitReceive+0x26c>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d017      	beq.n	8004dea <HAL_SPI_TransmitReceive+0x26c>
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d114      	bne.n	8004dea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	7812      	ldrb	r2, [r2, #0]
 8004dcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d119      	bne.n	8004e2c <HAL_SPI_TransmitReceive+0x2ae>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d014      	beq.n	8004e2c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e2c:	f7fd fb8a 	bl	8002544 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d803      	bhi.n	8004e44 <HAL_SPI_TransmitReceive+0x2c6>
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d102      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x2cc>
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e50:	e029      	b.n	8004ea6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1a2      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x224>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d19d      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 f8b2 	bl	8004fd4 <SPI_EndRxTxTransaction>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d006      	beq.n	8004e84 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e82:	e010      	b.n	8004ea6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	e000      	b.n	8004ea6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ea4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3730      	adds	r7, #48	; 0x30
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ed4:	f7fd fb36 	bl	8002544 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ee4:	f7fd fb2e 	bl	8002544 <HAL_GetTick>
 8004ee8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eea:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	015b      	lsls	r3, r3, #5
 8004ef0:	0d1b      	lsrs	r3, r3, #20
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	fb02 f303 	mul.w	r3, r2, r3
 8004ef8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004efa:	e054      	b.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f02:	d050      	beq.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f04:	f7fd fb1e 	bl	8002544 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d902      	bls.n	8004f1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d13d      	bne.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f32:	d111      	bne.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3c:	d004      	beq.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f46:	d107      	bne.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f60:	d10f      	bne.n	8004f82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e017      	b.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d19b      	bne.n	8004efc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000008 	.word	0x20000008

08004fd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fe0:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <SPI_EndRxTxTransaction+0x7c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <SPI_EndRxTxTransaction+0x80>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	0d5b      	lsrs	r3, r3, #21
 8004fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ff0:	fb02 f303 	mul.w	r3, r2, r3
 8004ff4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ffe:	d112      	bne.n	8005026 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2200      	movs	r2, #0
 8005008:	2180      	movs	r1, #128	; 0x80
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7ff ff5a 	bl	8004ec4 <SPI_WaitFlagStateUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d016      	beq.n	8005044 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f043 0220 	orr.w	r2, r3, #32
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e00f      	b.n	8005046 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	3b01      	subs	r3, #1
 8005030:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b80      	cmp	r3, #128	; 0x80
 800503e:	d0f2      	beq.n	8005026 <SPI_EndRxTxTransaction+0x52>
 8005040:	e000      	b.n	8005044 <SPI_EndRxTxTransaction+0x70>
        break;
 8005042:	bf00      	nop
  }

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000008 	.word	0x20000008
 8005054:	165e9f81 	.word	0x165e9f81

08005058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e041      	b.n	80050ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fd f810 	bl	80020a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3304      	adds	r3, #4
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f000 fa88 	bl	80055ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d001      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e044      	b.n	800519a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d018      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x6c>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513a:	d013      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x6c>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1a      	ldr	r2, [pc, #104]	; (80051ac <HAL_TIM_Base_Start_IT+0xb4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x6c>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x6c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x6c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a16      	ldr	r2, [pc, #88]	; (80051b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d111      	bne.n	8005188 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b06      	cmp	r3, #6
 8005174:	d010      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005186:	e007      	b.n	8005198 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40010000 	.word	0x40010000
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40014000 	.word	0x40014000

080051bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d122      	bne.n	8005218 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d11b      	bne.n	8005218 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0202 	mvn.w	r2, #2
 80051e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f9b5 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f9a7 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f9b8 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b04      	cmp	r3, #4
 8005224:	d122      	bne.n	800526c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b04      	cmp	r3, #4
 8005232:	d11b      	bne.n	800526c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0204 	mvn.w	r2, #4
 800523c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f98b 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 8005258:	e005      	b.n	8005266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f97d 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f98e 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b08      	cmp	r3, #8
 8005278:	d122      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b08      	cmp	r3, #8
 8005286:	d11b      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0208 	mvn.w	r2, #8
 8005290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2204      	movs	r2, #4
 8005296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f961 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 80052ac:	e005      	b.n	80052ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f953 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f964 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b10      	cmp	r3, #16
 80052cc:	d122      	bne.n	8005314 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b10      	cmp	r3, #16
 80052da:	d11b      	bne.n	8005314 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0210 	mvn.w	r2, #16
 80052e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2208      	movs	r2, #8
 80052ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f937 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f929 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f93a 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b01      	cmp	r3, #1
 8005320:	d10e      	bne.n	8005340 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b01      	cmp	r3, #1
 800532e:	d107      	bne.n	8005340 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0201 	mvn.w	r2, #1
 8005338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fb febc 	bl	80010b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b80      	cmp	r3, #128	; 0x80
 800534c:	d10e      	bne.n	800536c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005358:	2b80      	cmp	r3, #128	; 0x80
 800535a:	d107      	bne.n	800536c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fab2 	bl	80058d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005376:	2b40      	cmp	r3, #64	; 0x40
 8005378:	d10e      	bne.n	8005398 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d107      	bne.n	8005398 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f8ff 	bl	8005596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d10e      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d107      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0220 	mvn.w	r2, #32
 80053bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fa7c 	bl	80058bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_TIM_ConfigClockSource+0x1c>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e0b4      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x186>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800540e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005420:	d03e      	beq.n	80054a0 <HAL_TIM_ConfigClockSource+0xd4>
 8005422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005426:	f200 8087 	bhi.w	8005538 <HAL_TIM_ConfigClockSource+0x16c>
 800542a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542e:	f000 8086 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x172>
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d87f      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x16c>
 8005438:	2b70      	cmp	r3, #112	; 0x70
 800543a:	d01a      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0xa6>
 800543c:	2b70      	cmp	r3, #112	; 0x70
 800543e:	d87b      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x16c>
 8005440:	2b60      	cmp	r3, #96	; 0x60
 8005442:	d050      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x11a>
 8005444:	2b60      	cmp	r3, #96	; 0x60
 8005446:	d877      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x16c>
 8005448:	2b50      	cmp	r3, #80	; 0x50
 800544a:	d03c      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0xfa>
 800544c:	2b50      	cmp	r3, #80	; 0x50
 800544e:	d873      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x16c>
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	d058      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x13a>
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d86f      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x16c>
 8005458:	2b30      	cmp	r3, #48	; 0x30
 800545a:	d064      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x15a>
 800545c:	2b30      	cmp	r3, #48	; 0x30
 800545e:	d86b      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x16c>
 8005460:	2b20      	cmp	r3, #32
 8005462:	d060      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x15a>
 8005464:	2b20      	cmp	r3, #32
 8005466:	d867      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x16c>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d05c      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x15a>
 800546c:	2b10      	cmp	r3, #16
 800546e:	d05a      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x15a>
 8005470:	e062      	b.n	8005538 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6899      	ldr	r1, [r3, #8]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f000 f98d 	bl	80057a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	609a      	str	r2, [r3, #8]
      break;
 800549e:	e04f      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	6899      	ldr	r1, [r3, #8]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f000 f976 	bl	80057a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c2:	609a      	str	r2, [r3, #8]
      break;
 80054c4:	e03c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6859      	ldr	r1, [r3, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	461a      	mov	r2, r3
 80054d4:	f000 f8ea 	bl	80056ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2150      	movs	r1, #80	; 0x50
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f943 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 80054e4:	e02c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6859      	ldr	r1, [r3, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	461a      	mov	r2, r3
 80054f4:	f000 f909 	bl	800570a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2160      	movs	r1, #96	; 0x60
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f933 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005504:	e01c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6859      	ldr	r1, [r3, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	461a      	mov	r2, r3
 8005514:	f000 f8ca 	bl	80056ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2140      	movs	r1, #64	; 0x40
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f923 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005524:	e00c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f000 f91a 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005536:	e003      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
      break;
 800553c:	e000      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800553e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005550:	7bfb      	ldrb	r3, [r7, #15]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a34      	ldr	r2, [pc, #208]	; (8005690 <TIM_Base_SetConfig+0xe4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00f      	beq.n	80055e4 <TIM_Base_SetConfig+0x38>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ca:	d00b      	beq.n	80055e4 <TIM_Base_SetConfig+0x38>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a31      	ldr	r2, [pc, #196]	; (8005694 <TIM_Base_SetConfig+0xe8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_Base_SetConfig+0x38>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a30      	ldr	r2, [pc, #192]	; (8005698 <TIM_Base_SetConfig+0xec>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_Base_SetConfig+0x38>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a2f      	ldr	r2, [pc, #188]	; (800569c <TIM_Base_SetConfig+0xf0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d108      	bne.n	80055f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a25      	ldr	r2, [pc, #148]	; (8005690 <TIM_Base_SetConfig+0xe4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d01b      	beq.n	8005636 <TIM_Base_SetConfig+0x8a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005604:	d017      	beq.n	8005636 <TIM_Base_SetConfig+0x8a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a22      	ldr	r2, [pc, #136]	; (8005694 <TIM_Base_SetConfig+0xe8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <TIM_Base_SetConfig+0x8a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a21      	ldr	r2, [pc, #132]	; (8005698 <TIM_Base_SetConfig+0xec>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00f      	beq.n	8005636 <TIM_Base_SetConfig+0x8a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a20      	ldr	r2, [pc, #128]	; (800569c <TIM_Base_SetConfig+0xf0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00b      	beq.n	8005636 <TIM_Base_SetConfig+0x8a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1f      	ldr	r2, [pc, #124]	; (80056a0 <TIM_Base_SetConfig+0xf4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <TIM_Base_SetConfig+0x8a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a1e      	ldr	r2, [pc, #120]	; (80056a4 <TIM_Base_SetConfig+0xf8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_Base_SetConfig+0x8a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a1d      	ldr	r2, [pc, #116]	; (80056a8 <TIM_Base_SetConfig+0xfc>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d108      	bne.n	8005648 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a08      	ldr	r2, [pc, #32]	; (8005690 <TIM_Base_SetConfig+0xe4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d103      	bne.n	800567c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	615a      	str	r2, [r3, #20]
}
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40010000 	.word	0x40010000
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800
 800569c:	40000c00 	.word	0x40000c00
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40014400 	.word	0x40014400
 80056a8:	40014800 	.word	0x40014800

080056ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f023 0201 	bic.w	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f023 030a 	bic.w	r3, r3, #10
 80056e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570a:	b480      	push	{r7}
 800570c:	b087      	sub	sp, #28
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f023 0210 	bic.w	r2, r3, #16
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	031b      	lsls	r3, r3, #12
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005746:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	f043 0307 	orr.w	r3, r3, #7
 800578c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	609a      	str	r2, [r3, #8]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	021a      	lsls	r2, r3, #8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	609a      	str	r2, [r3, #8]
}
 80057d4:	bf00      	nop
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e050      	b.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1c      	ldr	r2, [pc, #112]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d018      	beq.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005844:	d013      	beq.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a18      	ldr	r2, [pc, #96]	; (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00e      	beq.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d009      	beq.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d004      	beq.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a13      	ldr	r2, [pc, #76]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d10c      	bne.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	4313      	orrs	r3, r2
 800587e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40010000 	.word	0x40010000
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40000800 	.word	0x40000800
 80058b4:	40000c00 	.word	0x40000c00
 80058b8:	40014000 	.word	0x40014000

080058bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e03f      	b.n	8005976 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fc fc24 	bl	8002158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2224      	movs	r2, #36	; 0x24
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f929 	bl	8005b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800593c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800594c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800595c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b08a      	sub	sp, #40	; 0x28
 8005982:	af02      	add	r7, sp, #8
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	603b      	str	r3, [r7, #0]
 800598a:	4613      	mov	r3, r2
 800598c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b20      	cmp	r3, #32
 800599c:	d17c      	bne.n	8005a98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <HAL_UART_Transmit+0x2c>
 80059a4:	88fb      	ldrh	r3, [r7, #6]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e075      	b.n	8005a9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_UART_Transmit+0x3e>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e06e      	b.n	8005a9a <HAL_UART_Transmit+0x11c>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2221      	movs	r2, #33	; 0x21
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059d2:	f7fc fdb7 	bl	8002544 <HAL_GetTick>
 80059d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	88fa      	ldrh	r2, [r7, #6]
 80059dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	88fa      	ldrh	r2, [r7, #6]
 80059e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ec:	d108      	bne.n	8005a00 <HAL_UART_Transmit+0x82>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d104      	bne.n	8005a00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	e003      	b.n	8005a08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a10:	e02a      	b.n	8005a68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2180      	movs	r1, #128	; 0x80
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f840 	bl	8005aa2 <UART_WaitOnFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e036      	b.n	8005a9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10b      	bne.n	8005a4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	3302      	adds	r3, #2
 8005a46:	61bb      	str	r3, [r7, #24]
 8005a48:	e007      	b.n	8005a5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	781a      	ldrb	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	3301      	adds	r3, #1
 8005a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1cf      	bne.n	8005a12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2140      	movs	r1, #64	; 0x40
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f810 	bl	8005aa2 <UART_WaitOnFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e006      	b.n	8005a9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	e000      	b.n	8005a9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a98:	2302      	movs	r3, #2
  }
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b090      	sub	sp, #64	; 0x40
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	603b      	str	r3, [r7, #0]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab2:	e050      	b.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d04c      	beq.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ac2:	f7fc fd3f 	bl	8002544 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d241      	bcs.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005af2:	637a      	str	r2, [r7, #52]	; 0x34
 8005af4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e5      	bne.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3314      	adds	r3, #20
 8005b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	613b      	str	r3, [r7, #16]
   return(result);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3314      	adds	r3, #20
 8005b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b26:	623a      	str	r2, [r7, #32]
 8005b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	69f9      	ldr	r1, [r7, #28]
 8005b2c:	6a3a      	ldr	r2, [r7, #32]
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e5      	bne.n	8005b06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e00f      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	bf0c      	ite	eq
 8005b66:	2301      	moveq	r3, #1
 8005b68:	2300      	movne	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	79fb      	ldrb	r3, [r7, #7]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d09f      	beq.n	8005ab4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3740      	adds	r7, #64	; 0x40
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	b09f      	sub	sp, #124	; 0x7c
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b96:	68d9      	ldr	r1, [r3, #12]
 8005b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	ea40 0301 	orr.w	r3, r0, r1
 8005ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bc4:	f021 010c 	bic.w	r1, r1, #12
 8005bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bde:	6999      	ldr	r1, [r3, #24]
 8005be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	ea40 0301 	orr.w	r3, r0, r1
 8005be8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4bc5      	ldr	r3, [pc, #788]	; (8005f04 <UART_SetConfig+0x384>)
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d004      	beq.n	8005bfe <UART_SetConfig+0x7e>
 8005bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4bc3      	ldr	r3, [pc, #780]	; (8005f08 <UART_SetConfig+0x388>)
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d103      	bne.n	8005c06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bfe:	f7fe ff21 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 8005c02:	6778      	str	r0, [r7, #116]	; 0x74
 8005c04:	e002      	b.n	8005c0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c06:	f7fe ff09 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 8005c0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c14:	f040 80b6 	bne.w	8005d84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c1a:	461c      	mov	r4, r3
 8005c1c:	f04f 0500 	mov.w	r5, #0
 8005c20:	4622      	mov	r2, r4
 8005c22:	462b      	mov	r3, r5
 8005c24:	1891      	adds	r1, r2, r2
 8005c26:	6439      	str	r1, [r7, #64]	; 0x40
 8005c28:	415b      	adcs	r3, r3
 8005c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c30:	1912      	adds	r2, r2, r4
 8005c32:	eb45 0303 	adc.w	r3, r5, r3
 8005c36:	f04f 0000 	mov.w	r0, #0
 8005c3a:	f04f 0100 	mov.w	r1, #0
 8005c3e:	00d9      	lsls	r1, r3, #3
 8005c40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c44:	00d0      	lsls	r0, r2, #3
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	1911      	adds	r1, r2, r4
 8005c4c:	6639      	str	r1, [r7, #96]	; 0x60
 8005c4e:	416b      	adcs	r3, r5
 8005c50:	667b      	str	r3, [r7, #100]	; 0x64
 8005c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	1891      	adds	r1, r2, r2
 8005c5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c60:	415b      	adcs	r3, r3
 8005c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c6c:	f7fa ff46 	bl	8000afc <__aeabi_uldivmod>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4ba5      	ldr	r3, [pc, #660]	; (8005f0c <UART_SetConfig+0x38c>)
 8005c76:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	011e      	lsls	r6, r3, #4
 8005c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c80:	461c      	mov	r4, r3
 8005c82:	f04f 0500 	mov.w	r5, #0
 8005c86:	4622      	mov	r2, r4
 8005c88:	462b      	mov	r3, r5
 8005c8a:	1891      	adds	r1, r2, r2
 8005c8c:	6339      	str	r1, [r7, #48]	; 0x30
 8005c8e:	415b      	adcs	r3, r3
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
 8005c92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c96:	1912      	adds	r2, r2, r4
 8005c98:	eb45 0303 	adc.w	r3, r5, r3
 8005c9c:	f04f 0000 	mov.w	r0, #0
 8005ca0:	f04f 0100 	mov.w	r1, #0
 8005ca4:	00d9      	lsls	r1, r3, #3
 8005ca6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005caa:	00d0      	lsls	r0, r2, #3
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	1911      	adds	r1, r2, r4
 8005cb2:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cb4:	416b      	adcs	r3, r5
 8005cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	1891      	adds	r1, r2, r2
 8005cc4:	62b9      	str	r1, [r7, #40]	; 0x28
 8005cc6:	415b      	adcs	r3, r3
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005cd2:	f7fa ff13 	bl	8000afc <__aeabi_uldivmod>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4b8c      	ldr	r3, [pc, #560]	; (8005f0c <UART_SetConfig+0x38c>)
 8005cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2164      	movs	r1, #100	; 0x64
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	3332      	adds	r3, #50	; 0x32
 8005cee:	4a87      	ldr	r2, [pc, #540]	; (8005f0c <UART_SetConfig+0x38c>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cfc:	441e      	add	r6, r3
 8005cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d00:	4618      	mov	r0, r3
 8005d02:	f04f 0100 	mov.w	r1, #0
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	1894      	adds	r4, r2, r2
 8005d0c:	623c      	str	r4, [r7, #32]
 8005d0e:	415b      	adcs	r3, r3
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d16:	1812      	adds	r2, r2, r0
 8005d18:	eb41 0303 	adc.w	r3, r1, r3
 8005d1c:	f04f 0400 	mov.w	r4, #0
 8005d20:	f04f 0500 	mov.w	r5, #0
 8005d24:	00dd      	lsls	r5, r3, #3
 8005d26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d2a:	00d4      	lsls	r4, r2, #3
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	462b      	mov	r3, r5
 8005d30:	1814      	adds	r4, r2, r0
 8005d32:	653c      	str	r4, [r7, #80]	; 0x50
 8005d34:	414b      	adcs	r3, r1
 8005d36:	657b      	str	r3, [r7, #84]	; 0x54
 8005d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	1891      	adds	r1, r2, r2
 8005d44:	61b9      	str	r1, [r7, #24]
 8005d46:	415b      	adcs	r3, r3
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005d52:	f7fa fed3 	bl	8000afc <__aeabi_uldivmod>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4b6c      	ldr	r3, [pc, #432]	; (8005f0c <UART_SetConfig+0x38c>)
 8005d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	2164      	movs	r1, #100	; 0x64
 8005d64:	fb01 f303 	mul.w	r3, r1, r3
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	3332      	adds	r3, #50	; 0x32
 8005d6e:	4a67      	ldr	r2, [pc, #412]	; (8005f0c <UART_SetConfig+0x38c>)
 8005d70:	fba2 2303 	umull	r2, r3, r2, r3
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	f003 0207 	and.w	r2, r3, #7
 8005d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4432      	add	r2, r6
 8005d80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d82:	e0b9      	b.n	8005ef8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d86:	461c      	mov	r4, r3
 8005d88:	f04f 0500 	mov.w	r5, #0
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	462b      	mov	r3, r5
 8005d90:	1891      	adds	r1, r2, r2
 8005d92:	6139      	str	r1, [r7, #16]
 8005d94:	415b      	adcs	r3, r3
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d9c:	1912      	adds	r2, r2, r4
 8005d9e:	eb45 0303 	adc.w	r3, r5, r3
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f04f 0100 	mov.w	r1, #0
 8005daa:	00d9      	lsls	r1, r3, #3
 8005dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005db0:	00d0      	lsls	r0, r2, #3
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	eb12 0804 	adds.w	r8, r2, r4
 8005dba:	eb43 0905 	adc.w	r9, r3, r5
 8005dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f04f 0100 	mov.w	r1, #0
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	008b      	lsls	r3, r1, #2
 8005dd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dd6:	0082      	lsls	r2, r0, #2
 8005dd8:	4640      	mov	r0, r8
 8005dda:	4649      	mov	r1, r9
 8005ddc:	f7fa fe8e 	bl	8000afc <__aeabi_uldivmod>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4b49      	ldr	r3, [pc, #292]	; (8005f0c <UART_SetConfig+0x38c>)
 8005de6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	011e      	lsls	r6, r3, #4
 8005dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df0:	4618      	mov	r0, r3
 8005df2:	f04f 0100 	mov.w	r1, #0
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	1894      	adds	r4, r2, r2
 8005dfc:	60bc      	str	r4, [r7, #8]
 8005dfe:	415b      	adcs	r3, r3
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e06:	1812      	adds	r2, r2, r0
 8005e08:	eb41 0303 	adc.w	r3, r1, r3
 8005e0c:	f04f 0400 	mov.w	r4, #0
 8005e10:	f04f 0500 	mov.w	r5, #0
 8005e14:	00dd      	lsls	r5, r3, #3
 8005e16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e1a:	00d4      	lsls	r4, r2, #3
 8005e1c:	4622      	mov	r2, r4
 8005e1e:	462b      	mov	r3, r5
 8005e20:	1814      	adds	r4, r2, r0
 8005e22:	64bc      	str	r4, [r7, #72]	; 0x48
 8005e24:	414b      	adcs	r3, r1
 8005e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f04f 0100 	mov.w	r1, #0
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	008b      	lsls	r3, r1, #2
 8005e3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e40:	0082      	lsls	r2, r0, #2
 8005e42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e46:	f7fa fe59 	bl	8000afc <__aeabi_uldivmod>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4b2f      	ldr	r3, [pc, #188]	; (8005f0c <UART_SetConfig+0x38c>)
 8005e50:	fba3 1302 	umull	r1, r3, r3, r2
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	2164      	movs	r1, #100	; 0x64
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	3332      	adds	r3, #50	; 0x32
 8005e62:	4a2a      	ldr	r2, [pc, #168]	; (8005f0c <UART_SetConfig+0x38c>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e6e:	441e      	add	r6, r3
 8005e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e72:	4618      	mov	r0, r3
 8005e74:	f04f 0100 	mov.w	r1, #0
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	1894      	adds	r4, r2, r2
 8005e7e:	603c      	str	r4, [r7, #0]
 8005e80:	415b      	adcs	r3, r3
 8005e82:	607b      	str	r3, [r7, #4]
 8005e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e88:	1812      	adds	r2, r2, r0
 8005e8a:	eb41 0303 	adc.w	r3, r1, r3
 8005e8e:	f04f 0400 	mov.w	r4, #0
 8005e92:	f04f 0500 	mov.w	r5, #0
 8005e96:	00dd      	lsls	r5, r3, #3
 8005e98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e9c:	00d4      	lsls	r4, r2, #3
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	eb12 0a00 	adds.w	sl, r2, r0
 8005ea6:	eb43 0b01 	adc.w	fp, r3, r1
 8005eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	008b      	lsls	r3, r1, #2
 8005ebe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ec2:	0082      	lsls	r2, r0, #2
 8005ec4:	4650      	mov	r0, sl
 8005ec6:	4659      	mov	r1, fp
 8005ec8:	f7fa fe18 	bl	8000afc <__aeabi_uldivmod>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <UART_SetConfig+0x38c>)
 8005ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	2164      	movs	r1, #100	; 0x64
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	3332      	adds	r3, #50	; 0x32
 8005ee4:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <UART_SetConfig+0x38c>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	f003 020f 	and.w	r2, r3, #15
 8005ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4432      	add	r2, r6
 8005ef6:	609a      	str	r2, [r3, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	377c      	adds	r7, #124	; 0x7c
 8005efc:	46bd      	mov	sp, r7
 8005efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f02:	bf00      	nop
 8005f04:	40011000 	.word	0x40011000
 8005f08:	40011400 	.word	0x40011400
 8005f0c:	51eb851f 	.word	0x51eb851f

08005f10 <__errno>:
 8005f10:	4b01      	ldr	r3, [pc, #4]	; (8005f18 <__errno+0x8>)
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	20000014 	.word	0x20000014

08005f1c <__libc_init_array>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	4d0d      	ldr	r5, [pc, #52]	; (8005f54 <__libc_init_array+0x38>)
 8005f20:	4c0d      	ldr	r4, [pc, #52]	; (8005f58 <__libc_init_array+0x3c>)
 8005f22:	1b64      	subs	r4, r4, r5
 8005f24:	10a4      	asrs	r4, r4, #2
 8005f26:	2600      	movs	r6, #0
 8005f28:	42a6      	cmp	r6, r4
 8005f2a:	d109      	bne.n	8005f40 <__libc_init_array+0x24>
 8005f2c:	4d0b      	ldr	r5, [pc, #44]	; (8005f5c <__libc_init_array+0x40>)
 8005f2e:	4c0c      	ldr	r4, [pc, #48]	; (8005f60 <__libc_init_array+0x44>)
 8005f30:	f000 ff76 	bl	8006e20 <_init>
 8005f34:	1b64      	subs	r4, r4, r5
 8005f36:	10a4      	asrs	r4, r4, #2
 8005f38:	2600      	movs	r6, #0
 8005f3a:	42a6      	cmp	r6, r4
 8005f3c:	d105      	bne.n	8005f4a <__libc_init_array+0x2e>
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f44:	4798      	blx	r3
 8005f46:	3601      	adds	r6, #1
 8005f48:	e7ee      	b.n	8005f28 <__libc_init_array+0xc>
 8005f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4e:	4798      	blx	r3
 8005f50:	3601      	adds	r6, #1
 8005f52:	e7f2      	b.n	8005f3a <__libc_init_array+0x1e>
 8005f54:	08006f30 	.word	0x08006f30
 8005f58:	08006f30 	.word	0x08006f30
 8005f5c:	08006f30 	.word	0x08006f30
 8005f60:	08006f34 	.word	0x08006f34

08005f64 <memset>:
 8005f64:	4402      	add	r2, r0
 8005f66:	4603      	mov	r3, r0
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d100      	bne.n	8005f6e <memset+0xa>
 8005f6c:	4770      	bx	lr
 8005f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f72:	e7f9      	b.n	8005f68 <memset+0x4>

08005f74 <iprintf>:
 8005f74:	b40f      	push	{r0, r1, r2, r3}
 8005f76:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <iprintf+0x2c>)
 8005f78:	b513      	push	{r0, r1, r4, lr}
 8005f7a:	681c      	ldr	r4, [r3, #0]
 8005f7c:	b124      	cbz	r4, 8005f88 <iprintf+0x14>
 8005f7e:	69a3      	ldr	r3, [r4, #24]
 8005f80:	b913      	cbnz	r3, 8005f88 <iprintf+0x14>
 8005f82:	4620      	mov	r0, r4
 8005f84:	f000 f866 	bl	8006054 <__sinit>
 8005f88:	ab05      	add	r3, sp, #20
 8005f8a:	9a04      	ldr	r2, [sp, #16]
 8005f8c:	68a1      	ldr	r1, [r4, #8]
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 f983 	bl	800629c <_vfiprintf_r>
 8005f96:	b002      	add	sp, #8
 8005f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f9c:	b004      	add	sp, #16
 8005f9e:	4770      	bx	lr
 8005fa0:	20000014 	.word	0x20000014

08005fa4 <std>:
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	4604      	mov	r4, r0
 8005faa:	e9c0 3300 	strd	r3, r3, [r0]
 8005fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fb2:	6083      	str	r3, [r0, #8]
 8005fb4:	8181      	strh	r1, [r0, #12]
 8005fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8005fb8:	81c2      	strh	r2, [r0, #14]
 8005fba:	6183      	str	r3, [r0, #24]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	305c      	adds	r0, #92	; 0x5c
 8005fc2:	f7ff ffcf 	bl	8005f64 <memset>
 8005fc6:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <std+0x38>)
 8005fc8:	6263      	str	r3, [r4, #36]	; 0x24
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <std+0x3c>)
 8005fcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fce:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <std+0x40>)
 8005fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fd2:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <std+0x44>)
 8005fd4:	6224      	str	r4, [r4, #32]
 8005fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8005fd8:	bd10      	pop	{r4, pc}
 8005fda:	bf00      	nop
 8005fdc:	08006845 	.word	0x08006845
 8005fe0:	08006867 	.word	0x08006867
 8005fe4:	0800689f 	.word	0x0800689f
 8005fe8:	080068c3 	.word	0x080068c3

08005fec <_cleanup_r>:
 8005fec:	4901      	ldr	r1, [pc, #4]	; (8005ff4 <_cleanup_r+0x8>)
 8005fee:	f000 b8af 	b.w	8006150 <_fwalk_reent>
 8005ff2:	bf00      	nop
 8005ff4:	08006b9d 	.word	0x08006b9d

08005ff8 <__sfmoreglue>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	1e4a      	subs	r2, r1, #1
 8005ffc:	2568      	movs	r5, #104	; 0x68
 8005ffe:	4355      	muls	r5, r2
 8006000:	460e      	mov	r6, r1
 8006002:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006006:	f000 f8c5 	bl	8006194 <_malloc_r>
 800600a:	4604      	mov	r4, r0
 800600c:	b140      	cbz	r0, 8006020 <__sfmoreglue+0x28>
 800600e:	2100      	movs	r1, #0
 8006010:	e9c0 1600 	strd	r1, r6, [r0]
 8006014:	300c      	adds	r0, #12
 8006016:	60a0      	str	r0, [r4, #8]
 8006018:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800601c:	f7ff ffa2 	bl	8005f64 <memset>
 8006020:	4620      	mov	r0, r4
 8006022:	bd70      	pop	{r4, r5, r6, pc}

08006024 <__sfp_lock_acquire>:
 8006024:	4801      	ldr	r0, [pc, #4]	; (800602c <__sfp_lock_acquire+0x8>)
 8006026:	f000 b8b3 	b.w	8006190 <__retarget_lock_acquire_recursive>
 800602a:	bf00      	nop
 800602c:	20000314 	.word	0x20000314

08006030 <__sfp_lock_release>:
 8006030:	4801      	ldr	r0, [pc, #4]	; (8006038 <__sfp_lock_release+0x8>)
 8006032:	f000 b8ae 	b.w	8006192 <__retarget_lock_release_recursive>
 8006036:	bf00      	nop
 8006038:	20000314 	.word	0x20000314

0800603c <__sinit_lock_acquire>:
 800603c:	4801      	ldr	r0, [pc, #4]	; (8006044 <__sinit_lock_acquire+0x8>)
 800603e:	f000 b8a7 	b.w	8006190 <__retarget_lock_acquire_recursive>
 8006042:	bf00      	nop
 8006044:	2000030f 	.word	0x2000030f

08006048 <__sinit_lock_release>:
 8006048:	4801      	ldr	r0, [pc, #4]	; (8006050 <__sinit_lock_release+0x8>)
 800604a:	f000 b8a2 	b.w	8006192 <__retarget_lock_release_recursive>
 800604e:	bf00      	nop
 8006050:	2000030f 	.word	0x2000030f

08006054 <__sinit>:
 8006054:	b510      	push	{r4, lr}
 8006056:	4604      	mov	r4, r0
 8006058:	f7ff fff0 	bl	800603c <__sinit_lock_acquire>
 800605c:	69a3      	ldr	r3, [r4, #24]
 800605e:	b11b      	cbz	r3, 8006068 <__sinit+0x14>
 8006060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006064:	f7ff bff0 	b.w	8006048 <__sinit_lock_release>
 8006068:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800606c:	6523      	str	r3, [r4, #80]	; 0x50
 800606e:	4b13      	ldr	r3, [pc, #76]	; (80060bc <__sinit+0x68>)
 8006070:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <__sinit+0x6c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	62a2      	str	r2, [r4, #40]	; 0x28
 8006076:	42a3      	cmp	r3, r4
 8006078:	bf04      	itt	eq
 800607a:	2301      	moveq	r3, #1
 800607c:	61a3      	streq	r3, [r4, #24]
 800607e:	4620      	mov	r0, r4
 8006080:	f000 f820 	bl	80060c4 <__sfp>
 8006084:	6060      	str	r0, [r4, #4]
 8006086:	4620      	mov	r0, r4
 8006088:	f000 f81c 	bl	80060c4 <__sfp>
 800608c:	60a0      	str	r0, [r4, #8]
 800608e:	4620      	mov	r0, r4
 8006090:	f000 f818 	bl	80060c4 <__sfp>
 8006094:	2200      	movs	r2, #0
 8006096:	60e0      	str	r0, [r4, #12]
 8006098:	2104      	movs	r1, #4
 800609a:	6860      	ldr	r0, [r4, #4]
 800609c:	f7ff ff82 	bl	8005fa4 <std>
 80060a0:	68a0      	ldr	r0, [r4, #8]
 80060a2:	2201      	movs	r2, #1
 80060a4:	2109      	movs	r1, #9
 80060a6:	f7ff ff7d 	bl	8005fa4 <std>
 80060aa:	68e0      	ldr	r0, [r4, #12]
 80060ac:	2202      	movs	r2, #2
 80060ae:	2112      	movs	r1, #18
 80060b0:	f7ff ff78 	bl	8005fa4 <std>
 80060b4:	2301      	movs	r3, #1
 80060b6:	61a3      	str	r3, [r4, #24]
 80060b8:	e7d2      	b.n	8006060 <__sinit+0xc>
 80060ba:	bf00      	nop
 80060bc:	08006e90 	.word	0x08006e90
 80060c0:	08005fed 	.word	0x08005fed

080060c4 <__sfp>:
 80060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c6:	4607      	mov	r7, r0
 80060c8:	f7ff ffac 	bl	8006024 <__sfp_lock_acquire>
 80060cc:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <__sfp+0x84>)
 80060ce:	681e      	ldr	r6, [r3, #0]
 80060d0:	69b3      	ldr	r3, [r6, #24]
 80060d2:	b913      	cbnz	r3, 80060da <__sfp+0x16>
 80060d4:	4630      	mov	r0, r6
 80060d6:	f7ff ffbd 	bl	8006054 <__sinit>
 80060da:	3648      	adds	r6, #72	; 0x48
 80060dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	d503      	bpl.n	80060ec <__sfp+0x28>
 80060e4:	6833      	ldr	r3, [r6, #0]
 80060e6:	b30b      	cbz	r3, 800612c <__sfp+0x68>
 80060e8:	6836      	ldr	r6, [r6, #0]
 80060ea:	e7f7      	b.n	80060dc <__sfp+0x18>
 80060ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060f0:	b9d5      	cbnz	r5, 8006128 <__sfp+0x64>
 80060f2:	4b16      	ldr	r3, [pc, #88]	; (800614c <__sfp+0x88>)
 80060f4:	60e3      	str	r3, [r4, #12]
 80060f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060fa:	6665      	str	r5, [r4, #100]	; 0x64
 80060fc:	f000 f847 	bl	800618e <__retarget_lock_init_recursive>
 8006100:	f7ff ff96 	bl	8006030 <__sfp_lock_release>
 8006104:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006108:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800610c:	6025      	str	r5, [r4, #0]
 800610e:	61a5      	str	r5, [r4, #24]
 8006110:	2208      	movs	r2, #8
 8006112:	4629      	mov	r1, r5
 8006114:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006118:	f7ff ff24 	bl	8005f64 <memset>
 800611c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006120:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006124:	4620      	mov	r0, r4
 8006126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006128:	3468      	adds	r4, #104	; 0x68
 800612a:	e7d9      	b.n	80060e0 <__sfp+0x1c>
 800612c:	2104      	movs	r1, #4
 800612e:	4638      	mov	r0, r7
 8006130:	f7ff ff62 	bl	8005ff8 <__sfmoreglue>
 8006134:	4604      	mov	r4, r0
 8006136:	6030      	str	r0, [r6, #0]
 8006138:	2800      	cmp	r0, #0
 800613a:	d1d5      	bne.n	80060e8 <__sfp+0x24>
 800613c:	f7ff ff78 	bl	8006030 <__sfp_lock_release>
 8006140:	230c      	movs	r3, #12
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	e7ee      	b.n	8006124 <__sfp+0x60>
 8006146:	bf00      	nop
 8006148:	08006e90 	.word	0x08006e90
 800614c:	ffff0001 	.word	0xffff0001

08006150 <_fwalk_reent>:
 8006150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006154:	4606      	mov	r6, r0
 8006156:	4688      	mov	r8, r1
 8006158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800615c:	2700      	movs	r7, #0
 800615e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006162:	f1b9 0901 	subs.w	r9, r9, #1
 8006166:	d505      	bpl.n	8006174 <_fwalk_reent+0x24>
 8006168:	6824      	ldr	r4, [r4, #0]
 800616a:	2c00      	cmp	r4, #0
 800616c:	d1f7      	bne.n	800615e <_fwalk_reent+0xe>
 800616e:	4638      	mov	r0, r7
 8006170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006174:	89ab      	ldrh	r3, [r5, #12]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d907      	bls.n	800618a <_fwalk_reent+0x3a>
 800617a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800617e:	3301      	adds	r3, #1
 8006180:	d003      	beq.n	800618a <_fwalk_reent+0x3a>
 8006182:	4629      	mov	r1, r5
 8006184:	4630      	mov	r0, r6
 8006186:	47c0      	blx	r8
 8006188:	4307      	orrs	r7, r0
 800618a:	3568      	adds	r5, #104	; 0x68
 800618c:	e7e9      	b.n	8006162 <_fwalk_reent+0x12>

0800618e <__retarget_lock_init_recursive>:
 800618e:	4770      	bx	lr

08006190 <__retarget_lock_acquire_recursive>:
 8006190:	4770      	bx	lr

08006192 <__retarget_lock_release_recursive>:
 8006192:	4770      	bx	lr

08006194 <_malloc_r>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	1ccd      	adds	r5, r1, #3
 8006198:	f025 0503 	bic.w	r5, r5, #3
 800619c:	3508      	adds	r5, #8
 800619e:	2d0c      	cmp	r5, #12
 80061a0:	bf38      	it	cc
 80061a2:	250c      	movcc	r5, #12
 80061a4:	2d00      	cmp	r5, #0
 80061a6:	4606      	mov	r6, r0
 80061a8:	db01      	blt.n	80061ae <_malloc_r+0x1a>
 80061aa:	42a9      	cmp	r1, r5
 80061ac:	d903      	bls.n	80061b6 <_malloc_r+0x22>
 80061ae:	230c      	movs	r3, #12
 80061b0:	6033      	str	r3, [r6, #0]
 80061b2:	2000      	movs	r0, #0
 80061b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061b6:	f000 fda3 	bl	8006d00 <__malloc_lock>
 80061ba:	4921      	ldr	r1, [pc, #132]	; (8006240 <_malloc_r+0xac>)
 80061bc:	680a      	ldr	r2, [r1, #0]
 80061be:	4614      	mov	r4, r2
 80061c0:	b99c      	cbnz	r4, 80061ea <_malloc_r+0x56>
 80061c2:	4f20      	ldr	r7, [pc, #128]	; (8006244 <_malloc_r+0xb0>)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	b923      	cbnz	r3, 80061d2 <_malloc_r+0x3e>
 80061c8:	4621      	mov	r1, r4
 80061ca:	4630      	mov	r0, r6
 80061cc:	f000 fb2a 	bl	8006824 <_sbrk_r>
 80061d0:	6038      	str	r0, [r7, #0]
 80061d2:	4629      	mov	r1, r5
 80061d4:	4630      	mov	r0, r6
 80061d6:	f000 fb25 	bl	8006824 <_sbrk_r>
 80061da:	1c43      	adds	r3, r0, #1
 80061dc:	d123      	bne.n	8006226 <_malloc_r+0x92>
 80061de:	230c      	movs	r3, #12
 80061e0:	6033      	str	r3, [r6, #0]
 80061e2:	4630      	mov	r0, r6
 80061e4:	f000 fd92 	bl	8006d0c <__malloc_unlock>
 80061e8:	e7e3      	b.n	80061b2 <_malloc_r+0x1e>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	1b5b      	subs	r3, r3, r5
 80061ee:	d417      	bmi.n	8006220 <_malloc_r+0x8c>
 80061f0:	2b0b      	cmp	r3, #11
 80061f2:	d903      	bls.n	80061fc <_malloc_r+0x68>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	441c      	add	r4, r3
 80061f8:	6025      	str	r5, [r4, #0]
 80061fa:	e004      	b.n	8006206 <_malloc_r+0x72>
 80061fc:	6863      	ldr	r3, [r4, #4]
 80061fe:	42a2      	cmp	r2, r4
 8006200:	bf0c      	ite	eq
 8006202:	600b      	streq	r3, [r1, #0]
 8006204:	6053      	strne	r3, [r2, #4]
 8006206:	4630      	mov	r0, r6
 8006208:	f000 fd80 	bl	8006d0c <__malloc_unlock>
 800620c:	f104 000b 	add.w	r0, r4, #11
 8006210:	1d23      	adds	r3, r4, #4
 8006212:	f020 0007 	bic.w	r0, r0, #7
 8006216:	1ac2      	subs	r2, r0, r3
 8006218:	d0cc      	beq.n	80061b4 <_malloc_r+0x20>
 800621a:	1a1b      	subs	r3, r3, r0
 800621c:	50a3      	str	r3, [r4, r2]
 800621e:	e7c9      	b.n	80061b4 <_malloc_r+0x20>
 8006220:	4622      	mov	r2, r4
 8006222:	6864      	ldr	r4, [r4, #4]
 8006224:	e7cc      	b.n	80061c0 <_malloc_r+0x2c>
 8006226:	1cc4      	adds	r4, r0, #3
 8006228:	f024 0403 	bic.w	r4, r4, #3
 800622c:	42a0      	cmp	r0, r4
 800622e:	d0e3      	beq.n	80061f8 <_malloc_r+0x64>
 8006230:	1a21      	subs	r1, r4, r0
 8006232:	4630      	mov	r0, r6
 8006234:	f000 faf6 	bl	8006824 <_sbrk_r>
 8006238:	3001      	adds	r0, #1
 800623a:	d1dd      	bne.n	80061f8 <_malloc_r+0x64>
 800623c:	e7cf      	b.n	80061de <_malloc_r+0x4a>
 800623e:	bf00      	nop
 8006240:	200000a8 	.word	0x200000a8
 8006244:	200000ac 	.word	0x200000ac

08006248 <__sfputc_r>:
 8006248:	6893      	ldr	r3, [r2, #8]
 800624a:	3b01      	subs	r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	b410      	push	{r4}
 8006250:	6093      	str	r3, [r2, #8]
 8006252:	da08      	bge.n	8006266 <__sfputc_r+0x1e>
 8006254:	6994      	ldr	r4, [r2, #24]
 8006256:	42a3      	cmp	r3, r4
 8006258:	db01      	blt.n	800625e <__sfputc_r+0x16>
 800625a:	290a      	cmp	r1, #10
 800625c:	d103      	bne.n	8006266 <__sfputc_r+0x1e>
 800625e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006262:	f000 bb33 	b.w	80068cc <__swbuf_r>
 8006266:	6813      	ldr	r3, [r2, #0]
 8006268:	1c58      	adds	r0, r3, #1
 800626a:	6010      	str	r0, [r2, #0]
 800626c:	7019      	strb	r1, [r3, #0]
 800626e:	4608      	mov	r0, r1
 8006270:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006274:	4770      	bx	lr

08006276 <__sfputs_r>:
 8006276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006278:	4606      	mov	r6, r0
 800627a:	460f      	mov	r7, r1
 800627c:	4614      	mov	r4, r2
 800627e:	18d5      	adds	r5, r2, r3
 8006280:	42ac      	cmp	r4, r5
 8006282:	d101      	bne.n	8006288 <__sfputs_r+0x12>
 8006284:	2000      	movs	r0, #0
 8006286:	e007      	b.n	8006298 <__sfputs_r+0x22>
 8006288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628c:	463a      	mov	r2, r7
 800628e:	4630      	mov	r0, r6
 8006290:	f7ff ffda 	bl	8006248 <__sfputc_r>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d1f3      	bne.n	8006280 <__sfputs_r+0xa>
 8006298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800629c <_vfiprintf_r>:
 800629c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a0:	460d      	mov	r5, r1
 80062a2:	b09d      	sub	sp, #116	; 0x74
 80062a4:	4614      	mov	r4, r2
 80062a6:	4698      	mov	r8, r3
 80062a8:	4606      	mov	r6, r0
 80062aa:	b118      	cbz	r0, 80062b4 <_vfiprintf_r+0x18>
 80062ac:	6983      	ldr	r3, [r0, #24]
 80062ae:	b90b      	cbnz	r3, 80062b4 <_vfiprintf_r+0x18>
 80062b0:	f7ff fed0 	bl	8006054 <__sinit>
 80062b4:	4b89      	ldr	r3, [pc, #548]	; (80064dc <_vfiprintf_r+0x240>)
 80062b6:	429d      	cmp	r5, r3
 80062b8:	d11b      	bne.n	80062f2 <_vfiprintf_r+0x56>
 80062ba:	6875      	ldr	r5, [r6, #4]
 80062bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062be:	07d9      	lsls	r1, r3, #31
 80062c0:	d405      	bmi.n	80062ce <_vfiprintf_r+0x32>
 80062c2:	89ab      	ldrh	r3, [r5, #12]
 80062c4:	059a      	lsls	r2, r3, #22
 80062c6:	d402      	bmi.n	80062ce <_vfiprintf_r+0x32>
 80062c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ca:	f7ff ff61 	bl	8006190 <__retarget_lock_acquire_recursive>
 80062ce:	89ab      	ldrh	r3, [r5, #12]
 80062d0:	071b      	lsls	r3, r3, #28
 80062d2:	d501      	bpl.n	80062d8 <_vfiprintf_r+0x3c>
 80062d4:	692b      	ldr	r3, [r5, #16]
 80062d6:	b9eb      	cbnz	r3, 8006314 <_vfiprintf_r+0x78>
 80062d8:	4629      	mov	r1, r5
 80062da:	4630      	mov	r0, r6
 80062dc:	f000 fb5a 	bl	8006994 <__swsetup_r>
 80062e0:	b1c0      	cbz	r0, 8006314 <_vfiprintf_r+0x78>
 80062e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062e4:	07dc      	lsls	r4, r3, #31
 80062e6:	d50e      	bpl.n	8006306 <_vfiprintf_r+0x6a>
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	b01d      	add	sp, #116	; 0x74
 80062ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f2:	4b7b      	ldr	r3, [pc, #492]	; (80064e0 <_vfiprintf_r+0x244>)
 80062f4:	429d      	cmp	r5, r3
 80062f6:	d101      	bne.n	80062fc <_vfiprintf_r+0x60>
 80062f8:	68b5      	ldr	r5, [r6, #8]
 80062fa:	e7df      	b.n	80062bc <_vfiprintf_r+0x20>
 80062fc:	4b79      	ldr	r3, [pc, #484]	; (80064e4 <_vfiprintf_r+0x248>)
 80062fe:	429d      	cmp	r5, r3
 8006300:	bf08      	it	eq
 8006302:	68f5      	ldreq	r5, [r6, #12]
 8006304:	e7da      	b.n	80062bc <_vfiprintf_r+0x20>
 8006306:	89ab      	ldrh	r3, [r5, #12]
 8006308:	0598      	lsls	r0, r3, #22
 800630a:	d4ed      	bmi.n	80062e8 <_vfiprintf_r+0x4c>
 800630c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800630e:	f7ff ff40 	bl	8006192 <__retarget_lock_release_recursive>
 8006312:	e7e9      	b.n	80062e8 <_vfiprintf_r+0x4c>
 8006314:	2300      	movs	r3, #0
 8006316:	9309      	str	r3, [sp, #36]	; 0x24
 8006318:	2320      	movs	r3, #32
 800631a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800631e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006322:	2330      	movs	r3, #48	; 0x30
 8006324:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064e8 <_vfiprintf_r+0x24c>
 8006328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800632c:	f04f 0901 	mov.w	r9, #1
 8006330:	4623      	mov	r3, r4
 8006332:	469a      	mov	sl, r3
 8006334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006338:	b10a      	cbz	r2, 800633e <_vfiprintf_r+0xa2>
 800633a:	2a25      	cmp	r2, #37	; 0x25
 800633c:	d1f9      	bne.n	8006332 <_vfiprintf_r+0x96>
 800633e:	ebba 0b04 	subs.w	fp, sl, r4
 8006342:	d00b      	beq.n	800635c <_vfiprintf_r+0xc0>
 8006344:	465b      	mov	r3, fp
 8006346:	4622      	mov	r2, r4
 8006348:	4629      	mov	r1, r5
 800634a:	4630      	mov	r0, r6
 800634c:	f7ff ff93 	bl	8006276 <__sfputs_r>
 8006350:	3001      	adds	r0, #1
 8006352:	f000 80aa 	beq.w	80064aa <_vfiprintf_r+0x20e>
 8006356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006358:	445a      	add	r2, fp
 800635a:	9209      	str	r2, [sp, #36]	; 0x24
 800635c:	f89a 3000 	ldrb.w	r3, [sl]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 80a2 	beq.w	80064aa <_vfiprintf_r+0x20e>
 8006366:	2300      	movs	r3, #0
 8006368:	f04f 32ff 	mov.w	r2, #4294967295
 800636c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006370:	f10a 0a01 	add.w	sl, sl, #1
 8006374:	9304      	str	r3, [sp, #16]
 8006376:	9307      	str	r3, [sp, #28]
 8006378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800637c:	931a      	str	r3, [sp, #104]	; 0x68
 800637e:	4654      	mov	r4, sl
 8006380:	2205      	movs	r2, #5
 8006382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006386:	4858      	ldr	r0, [pc, #352]	; (80064e8 <_vfiprintf_r+0x24c>)
 8006388:	f7f9 ff2a 	bl	80001e0 <memchr>
 800638c:	9a04      	ldr	r2, [sp, #16]
 800638e:	b9d8      	cbnz	r0, 80063c8 <_vfiprintf_r+0x12c>
 8006390:	06d1      	lsls	r1, r2, #27
 8006392:	bf44      	itt	mi
 8006394:	2320      	movmi	r3, #32
 8006396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800639a:	0713      	lsls	r3, r2, #28
 800639c:	bf44      	itt	mi
 800639e:	232b      	movmi	r3, #43	; 0x2b
 80063a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063a4:	f89a 3000 	ldrb.w	r3, [sl]
 80063a8:	2b2a      	cmp	r3, #42	; 0x2a
 80063aa:	d015      	beq.n	80063d8 <_vfiprintf_r+0x13c>
 80063ac:	9a07      	ldr	r2, [sp, #28]
 80063ae:	4654      	mov	r4, sl
 80063b0:	2000      	movs	r0, #0
 80063b2:	f04f 0c0a 	mov.w	ip, #10
 80063b6:	4621      	mov	r1, r4
 80063b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063bc:	3b30      	subs	r3, #48	; 0x30
 80063be:	2b09      	cmp	r3, #9
 80063c0:	d94e      	bls.n	8006460 <_vfiprintf_r+0x1c4>
 80063c2:	b1b0      	cbz	r0, 80063f2 <_vfiprintf_r+0x156>
 80063c4:	9207      	str	r2, [sp, #28]
 80063c6:	e014      	b.n	80063f2 <_vfiprintf_r+0x156>
 80063c8:	eba0 0308 	sub.w	r3, r0, r8
 80063cc:	fa09 f303 	lsl.w	r3, r9, r3
 80063d0:	4313      	orrs	r3, r2
 80063d2:	9304      	str	r3, [sp, #16]
 80063d4:	46a2      	mov	sl, r4
 80063d6:	e7d2      	b.n	800637e <_vfiprintf_r+0xe2>
 80063d8:	9b03      	ldr	r3, [sp, #12]
 80063da:	1d19      	adds	r1, r3, #4
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	9103      	str	r1, [sp, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	bfbb      	ittet	lt
 80063e4:	425b      	neglt	r3, r3
 80063e6:	f042 0202 	orrlt.w	r2, r2, #2
 80063ea:	9307      	strge	r3, [sp, #28]
 80063ec:	9307      	strlt	r3, [sp, #28]
 80063ee:	bfb8      	it	lt
 80063f0:	9204      	strlt	r2, [sp, #16]
 80063f2:	7823      	ldrb	r3, [r4, #0]
 80063f4:	2b2e      	cmp	r3, #46	; 0x2e
 80063f6:	d10c      	bne.n	8006412 <_vfiprintf_r+0x176>
 80063f8:	7863      	ldrb	r3, [r4, #1]
 80063fa:	2b2a      	cmp	r3, #42	; 0x2a
 80063fc:	d135      	bne.n	800646a <_vfiprintf_r+0x1ce>
 80063fe:	9b03      	ldr	r3, [sp, #12]
 8006400:	1d1a      	adds	r2, r3, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	9203      	str	r2, [sp, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	bfb8      	it	lt
 800640a:	f04f 33ff 	movlt.w	r3, #4294967295
 800640e:	3402      	adds	r4, #2
 8006410:	9305      	str	r3, [sp, #20]
 8006412:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80064f8 <_vfiprintf_r+0x25c>
 8006416:	7821      	ldrb	r1, [r4, #0]
 8006418:	2203      	movs	r2, #3
 800641a:	4650      	mov	r0, sl
 800641c:	f7f9 fee0 	bl	80001e0 <memchr>
 8006420:	b140      	cbz	r0, 8006434 <_vfiprintf_r+0x198>
 8006422:	2340      	movs	r3, #64	; 0x40
 8006424:	eba0 000a 	sub.w	r0, r0, sl
 8006428:	fa03 f000 	lsl.w	r0, r3, r0
 800642c:	9b04      	ldr	r3, [sp, #16]
 800642e:	4303      	orrs	r3, r0
 8006430:	3401      	adds	r4, #1
 8006432:	9304      	str	r3, [sp, #16]
 8006434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006438:	482c      	ldr	r0, [pc, #176]	; (80064ec <_vfiprintf_r+0x250>)
 800643a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800643e:	2206      	movs	r2, #6
 8006440:	f7f9 fece 	bl	80001e0 <memchr>
 8006444:	2800      	cmp	r0, #0
 8006446:	d03f      	beq.n	80064c8 <_vfiprintf_r+0x22c>
 8006448:	4b29      	ldr	r3, [pc, #164]	; (80064f0 <_vfiprintf_r+0x254>)
 800644a:	bb1b      	cbnz	r3, 8006494 <_vfiprintf_r+0x1f8>
 800644c:	9b03      	ldr	r3, [sp, #12]
 800644e:	3307      	adds	r3, #7
 8006450:	f023 0307 	bic.w	r3, r3, #7
 8006454:	3308      	adds	r3, #8
 8006456:	9303      	str	r3, [sp, #12]
 8006458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645a:	443b      	add	r3, r7
 800645c:	9309      	str	r3, [sp, #36]	; 0x24
 800645e:	e767      	b.n	8006330 <_vfiprintf_r+0x94>
 8006460:	fb0c 3202 	mla	r2, ip, r2, r3
 8006464:	460c      	mov	r4, r1
 8006466:	2001      	movs	r0, #1
 8006468:	e7a5      	b.n	80063b6 <_vfiprintf_r+0x11a>
 800646a:	2300      	movs	r3, #0
 800646c:	3401      	adds	r4, #1
 800646e:	9305      	str	r3, [sp, #20]
 8006470:	4619      	mov	r1, r3
 8006472:	f04f 0c0a 	mov.w	ip, #10
 8006476:	4620      	mov	r0, r4
 8006478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800647c:	3a30      	subs	r2, #48	; 0x30
 800647e:	2a09      	cmp	r2, #9
 8006480:	d903      	bls.n	800648a <_vfiprintf_r+0x1ee>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0c5      	beq.n	8006412 <_vfiprintf_r+0x176>
 8006486:	9105      	str	r1, [sp, #20]
 8006488:	e7c3      	b.n	8006412 <_vfiprintf_r+0x176>
 800648a:	fb0c 2101 	mla	r1, ip, r1, r2
 800648e:	4604      	mov	r4, r0
 8006490:	2301      	movs	r3, #1
 8006492:	e7f0      	b.n	8006476 <_vfiprintf_r+0x1da>
 8006494:	ab03      	add	r3, sp, #12
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	462a      	mov	r2, r5
 800649a:	4b16      	ldr	r3, [pc, #88]	; (80064f4 <_vfiprintf_r+0x258>)
 800649c:	a904      	add	r1, sp, #16
 800649e:	4630      	mov	r0, r6
 80064a0:	f3af 8000 	nop.w
 80064a4:	4607      	mov	r7, r0
 80064a6:	1c78      	adds	r0, r7, #1
 80064a8:	d1d6      	bne.n	8006458 <_vfiprintf_r+0x1bc>
 80064aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064ac:	07d9      	lsls	r1, r3, #31
 80064ae:	d405      	bmi.n	80064bc <_vfiprintf_r+0x220>
 80064b0:	89ab      	ldrh	r3, [r5, #12]
 80064b2:	059a      	lsls	r2, r3, #22
 80064b4:	d402      	bmi.n	80064bc <_vfiprintf_r+0x220>
 80064b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064b8:	f7ff fe6b 	bl	8006192 <__retarget_lock_release_recursive>
 80064bc:	89ab      	ldrh	r3, [r5, #12]
 80064be:	065b      	lsls	r3, r3, #25
 80064c0:	f53f af12 	bmi.w	80062e8 <_vfiprintf_r+0x4c>
 80064c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064c6:	e711      	b.n	80062ec <_vfiprintf_r+0x50>
 80064c8:	ab03      	add	r3, sp, #12
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	462a      	mov	r2, r5
 80064ce:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <_vfiprintf_r+0x258>)
 80064d0:	a904      	add	r1, sp, #16
 80064d2:	4630      	mov	r0, r6
 80064d4:	f000 f880 	bl	80065d8 <_printf_i>
 80064d8:	e7e4      	b.n	80064a4 <_vfiprintf_r+0x208>
 80064da:	bf00      	nop
 80064dc:	08006eb4 	.word	0x08006eb4
 80064e0:	08006ed4 	.word	0x08006ed4
 80064e4:	08006e94 	.word	0x08006e94
 80064e8:	08006ef4 	.word	0x08006ef4
 80064ec:	08006efe 	.word	0x08006efe
 80064f0:	00000000 	.word	0x00000000
 80064f4:	08006277 	.word	0x08006277
 80064f8:	08006efa 	.word	0x08006efa

080064fc <_printf_common>:
 80064fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006500:	4616      	mov	r6, r2
 8006502:	4699      	mov	r9, r3
 8006504:	688a      	ldr	r2, [r1, #8]
 8006506:	690b      	ldr	r3, [r1, #16]
 8006508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800650c:	4293      	cmp	r3, r2
 800650e:	bfb8      	it	lt
 8006510:	4613      	movlt	r3, r2
 8006512:	6033      	str	r3, [r6, #0]
 8006514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006518:	4607      	mov	r7, r0
 800651a:	460c      	mov	r4, r1
 800651c:	b10a      	cbz	r2, 8006522 <_printf_common+0x26>
 800651e:	3301      	adds	r3, #1
 8006520:	6033      	str	r3, [r6, #0]
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	0699      	lsls	r1, r3, #26
 8006526:	bf42      	ittt	mi
 8006528:	6833      	ldrmi	r3, [r6, #0]
 800652a:	3302      	addmi	r3, #2
 800652c:	6033      	strmi	r3, [r6, #0]
 800652e:	6825      	ldr	r5, [r4, #0]
 8006530:	f015 0506 	ands.w	r5, r5, #6
 8006534:	d106      	bne.n	8006544 <_printf_common+0x48>
 8006536:	f104 0a19 	add.w	sl, r4, #25
 800653a:	68e3      	ldr	r3, [r4, #12]
 800653c:	6832      	ldr	r2, [r6, #0]
 800653e:	1a9b      	subs	r3, r3, r2
 8006540:	42ab      	cmp	r3, r5
 8006542:	dc26      	bgt.n	8006592 <_printf_common+0x96>
 8006544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006548:	1e13      	subs	r3, r2, #0
 800654a:	6822      	ldr	r2, [r4, #0]
 800654c:	bf18      	it	ne
 800654e:	2301      	movne	r3, #1
 8006550:	0692      	lsls	r2, r2, #26
 8006552:	d42b      	bmi.n	80065ac <_printf_common+0xb0>
 8006554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006558:	4649      	mov	r1, r9
 800655a:	4638      	mov	r0, r7
 800655c:	47c0      	blx	r8
 800655e:	3001      	adds	r0, #1
 8006560:	d01e      	beq.n	80065a0 <_printf_common+0xa4>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	68e5      	ldr	r5, [r4, #12]
 8006566:	6832      	ldr	r2, [r6, #0]
 8006568:	f003 0306 	and.w	r3, r3, #6
 800656c:	2b04      	cmp	r3, #4
 800656e:	bf08      	it	eq
 8006570:	1aad      	subeq	r5, r5, r2
 8006572:	68a3      	ldr	r3, [r4, #8]
 8006574:	6922      	ldr	r2, [r4, #16]
 8006576:	bf0c      	ite	eq
 8006578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800657c:	2500      	movne	r5, #0
 800657e:	4293      	cmp	r3, r2
 8006580:	bfc4      	itt	gt
 8006582:	1a9b      	subgt	r3, r3, r2
 8006584:	18ed      	addgt	r5, r5, r3
 8006586:	2600      	movs	r6, #0
 8006588:	341a      	adds	r4, #26
 800658a:	42b5      	cmp	r5, r6
 800658c:	d11a      	bne.n	80065c4 <_printf_common+0xc8>
 800658e:	2000      	movs	r0, #0
 8006590:	e008      	b.n	80065a4 <_printf_common+0xa8>
 8006592:	2301      	movs	r3, #1
 8006594:	4652      	mov	r2, sl
 8006596:	4649      	mov	r1, r9
 8006598:	4638      	mov	r0, r7
 800659a:	47c0      	blx	r8
 800659c:	3001      	adds	r0, #1
 800659e:	d103      	bne.n	80065a8 <_printf_common+0xac>
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a8:	3501      	adds	r5, #1
 80065aa:	e7c6      	b.n	800653a <_printf_common+0x3e>
 80065ac:	18e1      	adds	r1, r4, r3
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	2030      	movs	r0, #48	; 0x30
 80065b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065b6:	4422      	add	r2, r4
 80065b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065c0:	3302      	adds	r3, #2
 80065c2:	e7c7      	b.n	8006554 <_printf_common+0x58>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4622      	mov	r2, r4
 80065c8:	4649      	mov	r1, r9
 80065ca:	4638      	mov	r0, r7
 80065cc:	47c0      	blx	r8
 80065ce:	3001      	adds	r0, #1
 80065d0:	d0e6      	beq.n	80065a0 <_printf_common+0xa4>
 80065d2:	3601      	adds	r6, #1
 80065d4:	e7d9      	b.n	800658a <_printf_common+0x8e>
	...

080065d8 <_printf_i>:
 80065d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	460c      	mov	r4, r1
 80065de:	4691      	mov	r9, r2
 80065e0:	7e27      	ldrb	r7, [r4, #24]
 80065e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065e4:	2f78      	cmp	r7, #120	; 0x78
 80065e6:	4680      	mov	r8, r0
 80065e8:	469a      	mov	sl, r3
 80065ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065ee:	d807      	bhi.n	8006600 <_printf_i+0x28>
 80065f0:	2f62      	cmp	r7, #98	; 0x62
 80065f2:	d80a      	bhi.n	800660a <_printf_i+0x32>
 80065f4:	2f00      	cmp	r7, #0
 80065f6:	f000 80d8 	beq.w	80067aa <_printf_i+0x1d2>
 80065fa:	2f58      	cmp	r7, #88	; 0x58
 80065fc:	f000 80a3 	beq.w	8006746 <_printf_i+0x16e>
 8006600:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006608:	e03a      	b.n	8006680 <_printf_i+0xa8>
 800660a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800660e:	2b15      	cmp	r3, #21
 8006610:	d8f6      	bhi.n	8006600 <_printf_i+0x28>
 8006612:	a001      	add	r0, pc, #4	; (adr r0, 8006618 <_printf_i+0x40>)
 8006614:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006618:	08006671 	.word	0x08006671
 800661c:	08006685 	.word	0x08006685
 8006620:	08006601 	.word	0x08006601
 8006624:	08006601 	.word	0x08006601
 8006628:	08006601 	.word	0x08006601
 800662c:	08006601 	.word	0x08006601
 8006630:	08006685 	.word	0x08006685
 8006634:	08006601 	.word	0x08006601
 8006638:	08006601 	.word	0x08006601
 800663c:	08006601 	.word	0x08006601
 8006640:	08006601 	.word	0x08006601
 8006644:	08006791 	.word	0x08006791
 8006648:	080066b5 	.word	0x080066b5
 800664c:	08006773 	.word	0x08006773
 8006650:	08006601 	.word	0x08006601
 8006654:	08006601 	.word	0x08006601
 8006658:	080067b3 	.word	0x080067b3
 800665c:	08006601 	.word	0x08006601
 8006660:	080066b5 	.word	0x080066b5
 8006664:	08006601 	.word	0x08006601
 8006668:	08006601 	.word	0x08006601
 800666c:	0800677b 	.word	0x0800677b
 8006670:	680b      	ldr	r3, [r1, #0]
 8006672:	1d1a      	adds	r2, r3, #4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	600a      	str	r2, [r1, #0]
 8006678:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800667c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006680:	2301      	movs	r3, #1
 8006682:	e0a3      	b.n	80067cc <_printf_i+0x1f4>
 8006684:	6825      	ldr	r5, [r4, #0]
 8006686:	6808      	ldr	r0, [r1, #0]
 8006688:	062e      	lsls	r6, r5, #24
 800668a:	f100 0304 	add.w	r3, r0, #4
 800668e:	d50a      	bpl.n	80066a6 <_printf_i+0xce>
 8006690:	6805      	ldr	r5, [r0, #0]
 8006692:	600b      	str	r3, [r1, #0]
 8006694:	2d00      	cmp	r5, #0
 8006696:	da03      	bge.n	80066a0 <_printf_i+0xc8>
 8006698:	232d      	movs	r3, #45	; 0x2d
 800669a:	426d      	negs	r5, r5
 800669c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a0:	485e      	ldr	r0, [pc, #376]	; (800681c <_printf_i+0x244>)
 80066a2:	230a      	movs	r3, #10
 80066a4:	e019      	b.n	80066da <_printf_i+0x102>
 80066a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80066aa:	6805      	ldr	r5, [r0, #0]
 80066ac:	600b      	str	r3, [r1, #0]
 80066ae:	bf18      	it	ne
 80066b0:	b22d      	sxthne	r5, r5
 80066b2:	e7ef      	b.n	8006694 <_printf_i+0xbc>
 80066b4:	680b      	ldr	r3, [r1, #0]
 80066b6:	6825      	ldr	r5, [r4, #0]
 80066b8:	1d18      	adds	r0, r3, #4
 80066ba:	6008      	str	r0, [r1, #0]
 80066bc:	0628      	lsls	r0, r5, #24
 80066be:	d501      	bpl.n	80066c4 <_printf_i+0xec>
 80066c0:	681d      	ldr	r5, [r3, #0]
 80066c2:	e002      	b.n	80066ca <_printf_i+0xf2>
 80066c4:	0669      	lsls	r1, r5, #25
 80066c6:	d5fb      	bpl.n	80066c0 <_printf_i+0xe8>
 80066c8:	881d      	ldrh	r5, [r3, #0]
 80066ca:	4854      	ldr	r0, [pc, #336]	; (800681c <_printf_i+0x244>)
 80066cc:	2f6f      	cmp	r7, #111	; 0x6f
 80066ce:	bf0c      	ite	eq
 80066d0:	2308      	moveq	r3, #8
 80066d2:	230a      	movne	r3, #10
 80066d4:	2100      	movs	r1, #0
 80066d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066da:	6866      	ldr	r6, [r4, #4]
 80066dc:	60a6      	str	r6, [r4, #8]
 80066de:	2e00      	cmp	r6, #0
 80066e0:	bfa2      	ittt	ge
 80066e2:	6821      	ldrge	r1, [r4, #0]
 80066e4:	f021 0104 	bicge.w	r1, r1, #4
 80066e8:	6021      	strge	r1, [r4, #0]
 80066ea:	b90d      	cbnz	r5, 80066f0 <_printf_i+0x118>
 80066ec:	2e00      	cmp	r6, #0
 80066ee:	d04d      	beq.n	800678c <_printf_i+0x1b4>
 80066f0:	4616      	mov	r6, r2
 80066f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80066f6:	fb03 5711 	mls	r7, r3, r1, r5
 80066fa:	5dc7      	ldrb	r7, [r0, r7]
 80066fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006700:	462f      	mov	r7, r5
 8006702:	42bb      	cmp	r3, r7
 8006704:	460d      	mov	r5, r1
 8006706:	d9f4      	bls.n	80066f2 <_printf_i+0x11a>
 8006708:	2b08      	cmp	r3, #8
 800670a:	d10b      	bne.n	8006724 <_printf_i+0x14c>
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	07df      	lsls	r7, r3, #31
 8006710:	d508      	bpl.n	8006724 <_printf_i+0x14c>
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	6861      	ldr	r1, [r4, #4]
 8006716:	4299      	cmp	r1, r3
 8006718:	bfde      	ittt	le
 800671a:	2330      	movle	r3, #48	; 0x30
 800671c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006720:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006724:	1b92      	subs	r2, r2, r6
 8006726:	6122      	str	r2, [r4, #16]
 8006728:	f8cd a000 	str.w	sl, [sp]
 800672c:	464b      	mov	r3, r9
 800672e:	aa03      	add	r2, sp, #12
 8006730:	4621      	mov	r1, r4
 8006732:	4640      	mov	r0, r8
 8006734:	f7ff fee2 	bl	80064fc <_printf_common>
 8006738:	3001      	adds	r0, #1
 800673a:	d14c      	bne.n	80067d6 <_printf_i+0x1fe>
 800673c:	f04f 30ff 	mov.w	r0, #4294967295
 8006740:	b004      	add	sp, #16
 8006742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006746:	4835      	ldr	r0, [pc, #212]	; (800681c <_printf_i+0x244>)
 8006748:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	680e      	ldr	r6, [r1, #0]
 8006750:	061f      	lsls	r7, r3, #24
 8006752:	f856 5b04 	ldr.w	r5, [r6], #4
 8006756:	600e      	str	r6, [r1, #0]
 8006758:	d514      	bpl.n	8006784 <_printf_i+0x1ac>
 800675a:	07d9      	lsls	r1, r3, #31
 800675c:	bf44      	itt	mi
 800675e:	f043 0320 	orrmi.w	r3, r3, #32
 8006762:	6023      	strmi	r3, [r4, #0]
 8006764:	b91d      	cbnz	r5, 800676e <_printf_i+0x196>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	f023 0320 	bic.w	r3, r3, #32
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	2310      	movs	r3, #16
 8006770:	e7b0      	b.n	80066d4 <_printf_i+0xfc>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	f043 0320 	orr.w	r3, r3, #32
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	2378      	movs	r3, #120	; 0x78
 800677c:	4828      	ldr	r0, [pc, #160]	; (8006820 <_printf_i+0x248>)
 800677e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006782:	e7e3      	b.n	800674c <_printf_i+0x174>
 8006784:	065e      	lsls	r6, r3, #25
 8006786:	bf48      	it	mi
 8006788:	b2ad      	uxthmi	r5, r5
 800678a:	e7e6      	b.n	800675a <_printf_i+0x182>
 800678c:	4616      	mov	r6, r2
 800678e:	e7bb      	b.n	8006708 <_printf_i+0x130>
 8006790:	680b      	ldr	r3, [r1, #0]
 8006792:	6826      	ldr	r6, [r4, #0]
 8006794:	6960      	ldr	r0, [r4, #20]
 8006796:	1d1d      	adds	r5, r3, #4
 8006798:	600d      	str	r5, [r1, #0]
 800679a:	0635      	lsls	r5, r6, #24
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	d501      	bpl.n	80067a4 <_printf_i+0x1cc>
 80067a0:	6018      	str	r0, [r3, #0]
 80067a2:	e002      	b.n	80067aa <_printf_i+0x1d2>
 80067a4:	0671      	lsls	r1, r6, #25
 80067a6:	d5fb      	bpl.n	80067a0 <_printf_i+0x1c8>
 80067a8:	8018      	strh	r0, [r3, #0]
 80067aa:	2300      	movs	r3, #0
 80067ac:	6123      	str	r3, [r4, #16]
 80067ae:	4616      	mov	r6, r2
 80067b0:	e7ba      	b.n	8006728 <_printf_i+0x150>
 80067b2:	680b      	ldr	r3, [r1, #0]
 80067b4:	1d1a      	adds	r2, r3, #4
 80067b6:	600a      	str	r2, [r1, #0]
 80067b8:	681e      	ldr	r6, [r3, #0]
 80067ba:	6862      	ldr	r2, [r4, #4]
 80067bc:	2100      	movs	r1, #0
 80067be:	4630      	mov	r0, r6
 80067c0:	f7f9 fd0e 	bl	80001e0 <memchr>
 80067c4:	b108      	cbz	r0, 80067ca <_printf_i+0x1f2>
 80067c6:	1b80      	subs	r0, r0, r6
 80067c8:	6060      	str	r0, [r4, #4]
 80067ca:	6863      	ldr	r3, [r4, #4]
 80067cc:	6123      	str	r3, [r4, #16]
 80067ce:	2300      	movs	r3, #0
 80067d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d4:	e7a8      	b.n	8006728 <_printf_i+0x150>
 80067d6:	6923      	ldr	r3, [r4, #16]
 80067d8:	4632      	mov	r2, r6
 80067da:	4649      	mov	r1, r9
 80067dc:	4640      	mov	r0, r8
 80067de:	47d0      	blx	sl
 80067e0:	3001      	adds	r0, #1
 80067e2:	d0ab      	beq.n	800673c <_printf_i+0x164>
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	079b      	lsls	r3, r3, #30
 80067e8:	d413      	bmi.n	8006812 <_printf_i+0x23a>
 80067ea:	68e0      	ldr	r0, [r4, #12]
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	4298      	cmp	r0, r3
 80067f0:	bfb8      	it	lt
 80067f2:	4618      	movlt	r0, r3
 80067f4:	e7a4      	b.n	8006740 <_printf_i+0x168>
 80067f6:	2301      	movs	r3, #1
 80067f8:	4632      	mov	r2, r6
 80067fa:	4649      	mov	r1, r9
 80067fc:	4640      	mov	r0, r8
 80067fe:	47d0      	blx	sl
 8006800:	3001      	adds	r0, #1
 8006802:	d09b      	beq.n	800673c <_printf_i+0x164>
 8006804:	3501      	adds	r5, #1
 8006806:	68e3      	ldr	r3, [r4, #12]
 8006808:	9903      	ldr	r1, [sp, #12]
 800680a:	1a5b      	subs	r3, r3, r1
 800680c:	42ab      	cmp	r3, r5
 800680e:	dcf2      	bgt.n	80067f6 <_printf_i+0x21e>
 8006810:	e7eb      	b.n	80067ea <_printf_i+0x212>
 8006812:	2500      	movs	r5, #0
 8006814:	f104 0619 	add.w	r6, r4, #25
 8006818:	e7f5      	b.n	8006806 <_printf_i+0x22e>
 800681a:	bf00      	nop
 800681c:	08006f05 	.word	0x08006f05
 8006820:	08006f16 	.word	0x08006f16

08006824 <_sbrk_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4d06      	ldr	r5, [pc, #24]	; (8006840 <_sbrk_r+0x1c>)
 8006828:	2300      	movs	r3, #0
 800682a:	4604      	mov	r4, r0
 800682c:	4608      	mov	r0, r1
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	f7fb fdb0 	bl	8002394 <_sbrk>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_sbrk_r+0x1a>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_sbrk_r+0x1a>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20000318 	.word	0x20000318

08006844 <__sread>:
 8006844:	b510      	push	{r4, lr}
 8006846:	460c      	mov	r4, r1
 8006848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684c:	f000 fab4 	bl	8006db8 <_read_r>
 8006850:	2800      	cmp	r0, #0
 8006852:	bfab      	itete	ge
 8006854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006856:	89a3      	ldrhlt	r3, [r4, #12]
 8006858:	181b      	addge	r3, r3, r0
 800685a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800685e:	bfac      	ite	ge
 8006860:	6563      	strge	r3, [r4, #84]	; 0x54
 8006862:	81a3      	strhlt	r3, [r4, #12]
 8006864:	bd10      	pop	{r4, pc}

08006866 <__swrite>:
 8006866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686a:	461f      	mov	r7, r3
 800686c:	898b      	ldrh	r3, [r1, #12]
 800686e:	05db      	lsls	r3, r3, #23
 8006870:	4605      	mov	r5, r0
 8006872:	460c      	mov	r4, r1
 8006874:	4616      	mov	r6, r2
 8006876:	d505      	bpl.n	8006884 <__swrite+0x1e>
 8006878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800687c:	2302      	movs	r3, #2
 800687e:	2200      	movs	r2, #0
 8006880:	f000 f9c8 	bl	8006c14 <_lseek_r>
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800688a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800688e:	81a3      	strh	r3, [r4, #12]
 8006890:	4632      	mov	r2, r6
 8006892:	463b      	mov	r3, r7
 8006894:	4628      	mov	r0, r5
 8006896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800689a:	f000 b869 	b.w	8006970 <_write_r>

0800689e <__sseek>:
 800689e:	b510      	push	{r4, lr}
 80068a0:	460c      	mov	r4, r1
 80068a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a6:	f000 f9b5 	bl	8006c14 <_lseek_r>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	bf15      	itete	ne
 80068b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80068b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068ba:	81a3      	strheq	r3, [r4, #12]
 80068bc:	bf18      	it	ne
 80068be:	81a3      	strhne	r3, [r4, #12]
 80068c0:	bd10      	pop	{r4, pc}

080068c2 <__sclose>:
 80068c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c6:	f000 b8d3 	b.w	8006a70 <_close_r>
	...

080068cc <__swbuf_r>:
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	460e      	mov	r6, r1
 80068d0:	4614      	mov	r4, r2
 80068d2:	4605      	mov	r5, r0
 80068d4:	b118      	cbz	r0, 80068de <__swbuf_r+0x12>
 80068d6:	6983      	ldr	r3, [r0, #24]
 80068d8:	b90b      	cbnz	r3, 80068de <__swbuf_r+0x12>
 80068da:	f7ff fbbb 	bl	8006054 <__sinit>
 80068de:	4b21      	ldr	r3, [pc, #132]	; (8006964 <__swbuf_r+0x98>)
 80068e0:	429c      	cmp	r4, r3
 80068e2:	d12b      	bne.n	800693c <__swbuf_r+0x70>
 80068e4:	686c      	ldr	r4, [r5, #4]
 80068e6:	69a3      	ldr	r3, [r4, #24]
 80068e8:	60a3      	str	r3, [r4, #8]
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	071a      	lsls	r2, r3, #28
 80068ee:	d52f      	bpl.n	8006950 <__swbuf_r+0x84>
 80068f0:	6923      	ldr	r3, [r4, #16]
 80068f2:	b36b      	cbz	r3, 8006950 <__swbuf_r+0x84>
 80068f4:	6923      	ldr	r3, [r4, #16]
 80068f6:	6820      	ldr	r0, [r4, #0]
 80068f8:	1ac0      	subs	r0, r0, r3
 80068fa:	6963      	ldr	r3, [r4, #20]
 80068fc:	b2f6      	uxtb	r6, r6
 80068fe:	4283      	cmp	r3, r0
 8006900:	4637      	mov	r7, r6
 8006902:	dc04      	bgt.n	800690e <__swbuf_r+0x42>
 8006904:	4621      	mov	r1, r4
 8006906:	4628      	mov	r0, r5
 8006908:	f000 f948 	bl	8006b9c <_fflush_r>
 800690c:	bb30      	cbnz	r0, 800695c <__swbuf_r+0x90>
 800690e:	68a3      	ldr	r3, [r4, #8]
 8006910:	3b01      	subs	r3, #1
 8006912:	60a3      	str	r3, [r4, #8]
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	6022      	str	r2, [r4, #0]
 800691a:	701e      	strb	r6, [r3, #0]
 800691c:	6963      	ldr	r3, [r4, #20]
 800691e:	3001      	adds	r0, #1
 8006920:	4283      	cmp	r3, r0
 8006922:	d004      	beq.n	800692e <__swbuf_r+0x62>
 8006924:	89a3      	ldrh	r3, [r4, #12]
 8006926:	07db      	lsls	r3, r3, #31
 8006928:	d506      	bpl.n	8006938 <__swbuf_r+0x6c>
 800692a:	2e0a      	cmp	r6, #10
 800692c:	d104      	bne.n	8006938 <__swbuf_r+0x6c>
 800692e:	4621      	mov	r1, r4
 8006930:	4628      	mov	r0, r5
 8006932:	f000 f933 	bl	8006b9c <_fflush_r>
 8006936:	b988      	cbnz	r0, 800695c <__swbuf_r+0x90>
 8006938:	4638      	mov	r0, r7
 800693a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800693c:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <__swbuf_r+0x9c>)
 800693e:	429c      	cmp	r4, r3
 8006940:	d101      	bne.n	8006946 <__swbuf_r+0x7a>
 8006942:	68ac      	ldr	r4, [r5, #8]
 8006944:	e7cf      	b.n	80068e6 <__swbuf_r+0x1a>
 8006946:	4b09      	ldr	r3, [pc, #36]	; (800696c <__swbuf_r+0xa0>)
 8006948:	429c      	cmp	r4, r3
 800694a:	bf08      	it	eq
 800694c:	68ec      	ldreq	r4, [r5, #12]
 800694e:	e7ca      	b.n	80068e6 <__swbuf_r+0x1a>
 8006950:	4621      	mov	r1, r4
 8006952:	4628      	mov	r0, r5
 8006954:	f000 f81e 	bl	8006994 <__swsetup_r>
 8006958:	2800      	cmp	r0, #0
 800695a:	d0cb      	beq.n	80068f4 <__swbuf_r+0x28>
 800695c:	f04f 37ff 	mov.w	r7, #4294967295
 8006960:	e7ea      	b.n	8006938 <__swbuf_r+0x6c>
 8006962:	bf00      	nop
 8006964:	08006eb4 	.word	0x08006eb4
 8006968:	08006ed4 	.word	0x08006ed4
 800696c:	08006e94 	.word	0x08006e94

08006970 <_write_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4d07      	ldr	r5, [pc, #28]	; (8006990 <_write_r+0x20>)
 8006974:	4604      	mov	r4, r0
 8006976:	4608      	mov	r0, r1
 8006978:	4611      	mov	r1, r2
 800697a:	2200      	movs	r2, #0
 800697c:	602a      	str	r2, [r5, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	f7fb fcb7 	bl	80022f2 <_write>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_write_r+0x1e>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_write_r+0x1e>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	20000318 	.word	0x20000318

08006994 <__swsetup_r>:
 8006994:	4b32      	ldr	r3, [pc, #200]	; (8006a60 <__swsetup_r+0xcc>)
 8006996:	b570      	push	{r4, r5, r6, lr}
 8006998:	681d      	ldr	r5, [r3, #0]
 800699a:	4606      	mov	r6, r0
 800699c:	460c      	mov	r4, r1
 800699e:	b125      	cbz	r5, 80069aa <__swsetup_r+0x16>
 80069a0:	69ab      	ldr	r3, [r5, #24]
 80069a2:	b913      	cbnz	r3, 80069aa <__swsetup_r+0x16>
 80069a4:	4628      	mov	r0, r5
 80069a6:	f7ff fb55 	bl	8006054 <__sinit>
 80069aa:	4b2e      	ldr	r3, [pc, #184]	; (8006a64 <__swsetup_r+0xd0>)
 80069ac:	429c      	cmp	r4, r3
 80069ae:	d10f      	bne.n	80069d0 <__swsetup_r+0x3c>
 80069b0:	686c      	ldr	r4, [r5, #4]
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069b8:	0719      	lsls	r1, r3, #28
 80069ba:	d42c      	bmi.n	8006a16 <__swsetup_r+0x82>
 80069bc:	06dd      	lsls	r5, r3, #27
 80069be:	d411      	bmi.n	80069e4 <__swsetup_r+0x50>
 80069c0:	2309      	movs	r3, #9
 80069c2:	6033      	str	r3, [r6, #0]
 80069c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	f04f 30ff 	mov.w	r0, #4294967295
 80069ce:	e03e      	b.n	8006a4e <__swsetup_r+0xba>
 80069d0:	4b25      	ldr	r3, [pc, #148]	; (8006a68 <__swsetup_r+0xd4>)
 80069d2:	429c      	cmp	r4, r3
 80069d4:	d101      	bne.n	80069da <__swsetup_r+0x46>
 80069d6:	68ac      	ldr	r4, [r5, #8]
 80069d8:	e7eb      	b.n	80069b2 <__swsetup_r+0x1e>
 80069da:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <__swsetup_r+0xd8>)
 80069dc:	429c      	cmp	r4, r3
 80069de:	bf08      	it	eq
 80069e0:	68ec      	ldreq	r4, [r5, #12]
 80069e2:	e7e6      	b.n	80069b2 <__swsetup_r+0x1e>
 80069e4:	0758      	lsls	r0, r3, #29
 80069e6:	d512      	bpl.n	8006a0e <__swsetup_r+0x7a>
 80069e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ea:	b141      	cbz	r1, 80069fe <__swsetup_r+0x6a>
 80069ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069f0:	4299      	cmp	r1, r3
 80069f2:	d002      	beq.n	80069fa <__swsetup_r+0x66>
 80069f4:	4630      	mov	r0, r6
 80069f6:	f000 f98f 	bl	8006d18 <_free_r>
 80069fa:	2300      	movs	r3, #0
 80069fc:	6363      	str	r3, [r4, #52]	; 0x34
 80069fe:	89a3      	ldrh	r3, [r4, #12]
 8006a00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a04:	81a3      	strh	r3, [r4, #12]
 8006a06:	2300      	movs	r3, #0
 8006a08:	6063      	str	r3, [r4, #4]
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f043 0308 	orr.w	r3, r3, #8
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	6923      	ldr	r3, [r4, #16]
 8006a18:	b94b      	cbnz	r3, 8006a2e <__swsetup_r+0x9a>
 8006a1a:	89a3      	ldrh	r3, [r4, #12]
 8006a1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a24:	d003      	beq.n	8006a2e <__swsetup_r+0x9a>
 8006a26:	4621      	mov	r1, r4
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f000 f929 	bl	8006c80 <__smakebuf_r>
 8006a2e:	89a0      	ldrh	r0, [r4, #12]
 8006a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a34:	f010 0301 	ands.w	r3, r0, #1
 8006a38:	d00a      	beq.n	8006a50 <__swsetup_r+0xbc>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60a3      	str	r3, [r4, #8]
 8006a3e:	6963      	ldr	r3, [r4, #20]
 8006a40:	425b      	negs	r3, r3
 8006a42:	61a3      	str	r3, [r4, #24]
 8006a44:	6923      	ldr	r3, [r4, #16]
 8006a46:	b943      	cbnz	r3, 8006a5a <__swsetup_r+0xc6>
 8006a48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a4c:	d1ba      	bne.n	80069c4 <__swsetup_r+0x30>
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	0781      	lsls	r1, r0, #30
 8006a52:	bf58      	it	pl
 8006a54:	6963      	ldrpl	r3, [r4, #20]
 8006a56:	60a3      	str	r3, [r4, #8]
 8006a58:	e7f4      	b.n	8006a44 <__swsetup_r+0xb0>
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e7f7      	b.n	8006a4e <__swsetup_r+0xba>
 8006a5e:	bf00      	nop
 8006a60:	20000014 	.word	0x20000014
 8006a64:	08006eb4 	.word	0x08006eb4
 8006a68:	08006ed4 	.word	0x08006ed4
 8006a6c:	08006e94 	.word	0x08006e94

08006a70 <_close_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4d06      	ldr	r5, [pc, #24]	; (8006a8c <_close_r+0x1c>)
 8006a74:	2300      	movs	r3, #0
 8006a76:	4604      	mov	r4, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	602b      	str	r3, [r5, #0]
 8006a7c:	f7fb fc55 	bl	800232a <_close>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d102      	bne.n	8006a8a <_close_r+0x1a>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	b103      	cbz	r3, 8006a8a <_close_r+0x1a>
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	20000318 	.word	0x20000318

08006a90 <__sflush_r>:
 8006a90:	898a      	ldrh	r2, [r1, #12]
 8006a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a96:	4605      	mov	r5, r0
 8006a98:	0710      	lsls	r0, r2, #28
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	d458      	bmi.n	8006b50 <__sflush_r+0xc0>
 8006a9e:	684b      	ldr	r3, [r1, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	dc05      	bgt.n	8006ab0 <__sflush_r+0x20>
 8006aa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	dc02      	bgt.n	8006ab0 <__sflush_r+0x20>
 8006aaa:	2000      	movs	r0, #0
 8006aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ab2:	2e00      	cmp	r6, #0
 8006ab4:	d0f9      	beq.n	8006aaa <__sflush_r+0x1a>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006abc:	682f      	ldr	r7, [r5, #0]
 8006abe:	602b      	str	r3, [r5, #0]
 8006ac0:	d032      	beq.n	8006b28 <__sflush_r+0x98>
 8006ac2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ac4:	89a3      	ldrh	r3, [r4, #12]
 8006ac6:	075a      	lsls	r2, r3, #29
 8006ac8:	d505      	bpl.n	8006ad6 <__sflush_r+0x46>
 8006aca:	6863      	ldr	r3, [r4, #4]
 8006acc:	1ac0      	subs	r0, r0, r3
 8006ace:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ad0:	b10b      	cbz	r3, 8006ad6 <__sflush_r+0x46>
 8006ad2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ad4:	1ac0      	subs	r0, r0, r3
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	4602      	mov	r2, r0
 8006ada:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006adc:	6a21      	ldr	r1, [r4, #32]
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b0      	blx	r6
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	d106      	bne.n	8006af6 <__sflush_r+0x66>
 8006ae8:	6829      	ldr	r1, [r5, #0]
 8006aea:	291d      	cmp	r1, #29
 8006aec:	d82c      	bhi.n	8006b48 <__sflush_r+0xb8>
 8006aee:	4a2a      	ldr	r2, [pc, #168]	; (8006b98 <__sflush_r+0x108>)
 8006af0:	40ca      	lsrs	r2, r1
 8006af2:	07d6      	lsls	r6, r2, #31
 8006af4:	d528      	bpl.n	8006b48 <__sflush_r+0xb8>
 8006af6:	2200      	movs	r2, #0
 8006af8:	6062      	str	r2, [r4, #4]
 8006afa:	04d9      	lsls	r1, r3, #19
 8006afc:	6922      	ldr	r2, [r4, #16]
 8006afe:	6022      	str	r2, [r4, #0]
 8006b00:	d504      	bpl.n	8006b0c <__sflush_r+0x7c>
 8006b02:	1c42      	adds	r2, r0, #1
 8006b04:	d101      	bne.n	8006b0a <__sflush_r+0x7a>
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	b903      	cbnz	r3, 8006b0c <__sflush_r+0x7c>
 8006b0a:	6560      	str	r0, [r4, #84]	; 0x54
 8006b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b0e:	602f      	str	r7, [r5, #0]
 8006b10:	2900      	cmp	r1, #0
 8006b12:	d0ca      	beq.n	8006aaa <__sflush_r+0x1a>
 8006b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b18:	4299      	cmp	r1, r3
 8006b1a:	d002      	beq.n	8006b22 <__sflush_r+0x92>
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	f000 f8fb 	bl	8006d18 <_free_r>
 8006b22:	2000      	movs	r0, #0
 8006b24:	6360      	str	r0, [r4, #52]	; 0x34
 8006b26:	e7c1      	b.n	8006aac <__sflush_r+0x1c>
 8006b28:	6a21      	ldr	r1, [r4, #32]
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	47b0      	blx	r6
 8006b30:	1c41      	adds	r1, r0, #1
 8006b32:	d1c7      	bne.n	8006ac4 <__sflush_r+0x34>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0c4      	beq.n	8006ac4 <__sflush_r+0x34>
 8006b3a:	2b1d      	cmp	r3, #29
 8006b3c:	d001      	beq.n	8006b42 <__sflush_r+0xb2>
 8006b3e:	2b16      	cmp	r3, #22
 8006b40:	d101      	bne.n	8006b46 <__sflush_r+0xb6>
 8006b42:	602f      	str	r7, [r5, #0]
 8006b44:	e7b1      	b.n	8006aaa <__sflush_r+0x1a>
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b4c:	81a3      	strh	r3, [r4, #12]
 8006b4e:	e7ad      	b.n	8006aac <__sflush_r+0x1c>
 8006b50:	690f      	ldr	r7, [r1, #16]
 8006b52:	2f00      	cmp	r7, #0
 8006b54:	d0a9      	beq.n	8006aaa <__sflush_r+0x1a>
 8006b56:	0793      	lsls	r3, r2, #30
 8006b58:	680e      	ldr	r6, [r1, #0]
 8006b5a:	bf08      	it	eq
 8006b5c:	694b      	ldreq	r3, [r1, #20]
 8006b5e:	600f      	str	r7, [r1, #0]
 8006b60:	bf18      	it	ne
 8006b62:	2300      	movne	r3, #0
 8006b64:	eba6 0807 	sub.w	r8, r6, r7
 8006b68:	608b      	str	r3, [r1, #8]
 8006b6a:	f1b8 0f00 	cmp.w	r8, #0
 8006b6e:	dd9c      	ble.n	8006aaa <__sflush_r+0x1a>
 8006b70:	6a21      	ldr	r1, [r4, #32]
 8006b72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b74:	4643      	mov	r3, r8
 8006b76:	463a      	mov	r2, r7
 8006b78:	4628      	mov	r0, r5
 8006b7a:	47b0      	blx	r6
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	dc06      	bgt.n	8006b8e <__sflush_r+0xfe>
 8006b80:	89a3      	ldrh	r3, [r4, #12]
 8006b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	e78e      	b.n	8006aac <__sflush_r+0x1c>
 8006b8e:	4407      	add	r7, r0
 8006b90:	eba8 0800 	sub.w	r8, r8, r0
 8006b94:	e7e9      	b.n	8006b6a <__sflush_r+0xda>
 8006b96:	bf00      	nop
 8006b98:	20400001 	.word	0x20400001

08006b9c <_fflush_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	690b      	ldr	r3, [r1, #16]
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	b913      	cbnz	r3, 8006bac <_fflush_r+0x10>
 8006ba6:	2500      	movs	r5, #0
 8006ba8:	4628      	mov	r0, r5
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	b118      	cbz	r0, 8006bb6 <_fflush_r+0x1a>
 8006bae:	6983      	ldr	r3, [r0, #24]
 8006bb0:	b90b      	cbnz	r3, 8006bb6 <_fflush_r+0x1a>
 8006bb2:	f7ff fa4f 	bl	8006054 <__sinit>
 8006bb6:	4b14      	ldr	r3, [pc, #80]	; (8006c08 <_fflush_r+0x6c>)
 8006bb8:	429c      	cmp	r4, r3
 8006bba:	d11b      	bne.n	8006bf4 <_fflush_r+0x58>
 8006bbc:	686c      	ldr	r4, [r5, #4]
 8006bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0ef      	beq.n	8006ba6 <_fflush_r+0xa>
 8006bc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bc8:	07d0      	lsls	r0, r2, #31
 8006bca:	d404      	bmi.n	8006bd6 <_fflush_r+0x3a>
 8006bcc:	0599      	lsls	r1, r3, #22
 8006bce:	d402      	bmi.n	8006bd6 <_fflush_r+0x3a>
 8006bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bd2:	f7ff fadd 	bl	8006190 <__retarget_lock_acquire_recursive>
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	4621      	mov	r1, r4
 8006bda:	f7ff ff59 	bl	8006a90 <__sflush_r>
 8006bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006be0:	07da      	lsls	r2, r3, #31
 8006be2:	4605      	mov	r5, r0
 8006be4:	d4e0      	bmi.n	8006ba8 <_fflush_r+0xc>
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	059b      	lsls	r3, r3, #22
 8006bea:	d4dd      	bmi.n	8006ba8 <_fflush_r+0xc>
 8006bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bee:	f7ff fad0 	bl	8006192 <__retarget_lock_release_recursive>
 8006bf2:	e7d9      	b.n	8006ba8 <_fflush_r+0xc>
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <_fflush_r+0x70>)
 8006bf6:	429c      	cmp	r4, r3
 8006bf8:	d101      	bne.n	8006bfe <_fflush_r+0x62>
 8006bfa:	68ac      	ldr	r4, [r5, #8]
 8006bfc:	e7df      	b.n	8006bbe <_fflush_r+0x22>
 8006bfe:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <_fflush_r+0x74>)
 8006c00:	429c      	cmp	r4, r3
 8006c02:	bf08      	it	eq
 8006c04:	68ec      	ldreq	r4, [r5, #12]
 8006c06:	e7da      	b.n	8006bbe <_fflush_r+0x22>
 8006c08:	08006eb4 	.word	0x08006eb4
 8006c0c:	08006ed4 	.word	0x08006ed4
 8006c10:	08006e94 	.word	0x08006e94

08006c14 <_lseek_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	4d07      	ldr	r5, [pc, #28]	; (8006c34 <_lseek_r+0x20>)
 8006c18:	4604      	mov	r4, r0
 8006c1a:	4608      	mov	r0, r1
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	2200      	movs	r2, #0
 8006c20:	602a      	str	r2, [r5, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	f7fb fba8 	bl	8002378 <_lseek>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_lseek_r+0x1e>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_lseek_r+0x1e>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	20000318 	.word	0x20000318

08006c38 <__swhatbuf_r>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	460e      	mov	r6, r1
 8006c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c40:	2900      	cmp	r1, #0
 8006c42:	b096      	sub	sp, #88	; 0x58
 8006c44:	4614      	mov	r4, r2
 8006c46:	461d      	mov	r5, r3
 8006c48:	da07      	bge.n	8006c5a <__swhatbuf_r+0x22>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	602b      	str	r3, [r5, #0]
 8006c4e:	89b3      	ldrh	r3, [r6, #12]
 8006c50:	061a      	lsls	r2, r3, #24
 8006c52:	d410      	bmi.n	8006c76 <__swhatbuf_r+0x3e>
 8006c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c58:	e00e      	b.n	8006c78 <__swhatbuf_r+0x40>
 8006c5a:	466a      	mov	r2, sp
 8006c5c:	f000 f8be 	bl	8006ddc <_fstat_r>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	dbf2      	blt.n	8006c4a <__swhatbuf_r+0x12>
 8006c64:	9a01      	ldr	r2, [sp, #4]
 8006c66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c6e:	425a      	negs	r2, r3
 8006c70:	415a      	adcs	r2, r3
 8006c72:	602a      	str	r2, [r5, #0]
 8006c74:	e7ee      	b.n	8006c54 <__swhatbuf_r+0x1c>
 8006c76:	2340      	movs	r3, #64	; 0x40
 8006c78:	2000      	movs	r0, #0
 8006c7a:	6023      	str	r3, [r4, #0]
 8006c7c:	b016      	add	sp, #88	; 0x58
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}

08006c80 <__smakebuf_r>:
 8006c80:	898b      	ldrh	r3, [r1, #12]
 8006c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c84:	079d      	lsls	r5, r3, #30
 8006c86:	4606      	mov	r6, r0
 8006c88:	460c      	mov	r4, r1
 8006c8a:	d507      	bpl.n	8006c9c <__smakebuf_r+0x1c>
 8006c8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	6123      	str	r3, [r4, #16]
 8006c94:	2301      	movs	r3, #1
 8006c96:	6163      	str	r3, [r4, #20]
 8006c98:	b002      	add	sp, #8
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	ab01      	add	r3, sp, #4
 8006c9e:	466a      	mov	r2, sp
 8006ca0:	f7ff ffca 	bl	8006c38 <__swhatbuf_r>
 8006ca4:	9900      	ldr	r1, [sp, #0]
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f7ff fa73 	bl	8006194 <_malloc_r>
 8006cae:	b948      	cbnz	r0, 8006cc4 <__smakebuf_r+0x44>
 8006cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cb4:	059a      	lsls	r2, r3, #22
 8006cb6:	d4ef      	bmi.n	8006c98 <__smakebuf_r+0x18>
 8006cb8:	f023 0303 	bic.w	r3, r3, #3
 8006cbc:	f043 0302 	orr.w	r3, r3, #2
 8006cc0:	81a3      	strh	r3, [r4, #12]
 8006cc2:	e7e3      	b.n	8006c8c <__smakebuf_r+0xc>
 8006cc4:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <__smakebuf_r+0x7c>)
 8006cc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	6020      	str	r0, [r4, #0]
 8006ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	9b00      	ldr	r3, [sp, #0]
 8006cd4:	6163      	str	r3, [r4, #20]
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	6120      	str	r0, [r4, #16]
 8006cda:	b15b      	cbz	r3, 8006cf4 <__smakebuf_r+0x74>
 8006cdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f000 f88d 	bl	8006e00 <_isatty_r>
 8006ce6:	b128      	cbz	r0, 8006cf4 <__smakebuf_r+0x74>
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	f023 0303 	bic.w	r3, r3, #3
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	81a3      	strh	r3, [r4, #12]
 8006cf4:	89a0      	ldrh	r0, [r4, #12]
 8006cf6:	4305      	orrs	r5, r0
 8006cf8:	81a5      	strh	r5, [r4, #12]
 8006cfa:	e7cd      	b.n	8006c98 <__smakebuf_r+0x18>
 8006cfc:	08005fed 	.word	0x08005fed

08006d00 <__malloc_lock>:
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <__malloc_lock+0x8>)
 8006d02:	f7ff ba45 	b.w	8006190 <__retarget_lock_acquire_recursive>
 8006d06:	bf00      	nop
 8006d08:	20000310 	.word	0x20000310

08006d0c <__malloc_unlock>:
 8006d0c:	4801      	ldr	r0, [pc, #4]	; (8006d14 <__malloc_unlock+0x8>)
 8006d0e:	f7ff ba40 	b.w	8006192 <__retarget_lock_release_recursive>
 8006d12:	bf00      	nop
 8006d14:	20000310 	.word	0x20000310

08006d18 <_free_r>:
 8006d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d1a:	2900      	cmp	r1, #0
 8006d1c:	d048      	beq.n	8006db0 <_free_r+0x98>
 8006d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d22:	9001      	str	r0, [sp, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f1a1 0404 	sub.w	r4, r1, #4
 8006d2a:	bfb8      	it	lt
 8006d2c:	18e4      	addlt	r4, r4, r3
 8006d2e:	f7ff ffe7 	bl	8006d00 <__malloc_lock>
 8006d32:	4a20      	ldr	r2, [pc, #128]	; (8006db4 <_free_r+0x9c>)
 8006d34:	9801      	ldr	r0, [sp, #4]
 8006d36:	6813      	ldr	r3, [r2, #0]
 8006d38:	4615      	mov	r5, r2
 8006d3a:	b933      	cbnz	r3, 8006d4a <_free_r+0x32>
 8006d3c:	6063      	str	r3, [r4, #4]
 8006d3e:	6014      	str	r4, [r2, #0]
 8006d40:	b003      	add	sp, #12
 8006d42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d46:	f7ff bfe1 	b.w	8006d0c <__malloc_unlock>
 8006d4a:	42a3      	cmp	r3, r4
 8006d4c:	d90b      	bls.n	8006d66 <_free_r+0x4e>
 8006d4e:	6821      	ldr	r1, [r4, #0]
 8006d50:	1862      	adds	r2, r4, r1
 8006d52:	4293      	cmp	r3, r2
 8006d54:	bf04      	itt	eq
 8006d56:	681a      	ldreq	r2, [r3, #0]
 8006d58:	685b      	ldreq	r3, [r3, #4]
 8006d5a:	6063      	str	r3, [r4, #4]
 8006d5c:	bf04      	itt	eq
 8006d5e:	1852      	addeq	r2, r2, r1
 8006d60:	6022      	streq	r2, [r4, #0]
 8006d62:	602c      	str	r4, [r5, #0]
 8006d64:	e7ec      	b.n	8006d40 <_free_r+0x28>
 8006d66:	461a      	mov	r2, r3
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	b10b      	cbz	r3, 8006d70 <_free_r+0x58>
 8006d6c:	42a3      	cmp	r3, r4
 8006d6e:	d9fa      	bls.n	8006d66 <_free_r+0x4e>
 8006d70:	6811      	ldr	r1, [r2, #0]
 8006d72:	1855      	adds	r5, r2, r1
 8006d74:	42a5      	cmp	r5, r4
 8006d76:	d10b      	bne.n	8006d90 <_free_r+0x78>
 8006d78:	6824      	ldr	r4, [r4, #0]
 8006d7a:	4421      	add	r1, r4
 8006d7c:	1854      	adds	r4, r2, r1
 8006d7e:	42a3      	cmp	r3, r4
 8006d80:	6011      	str	r1, [r2, #0]
 8006d82:	d1dd      	bne.n	8006d40 <_free_r+0x28>
 8006d84:	681c      	ldr	r4, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	6053      	str	r3, [r2, #4]
 8006d8a:	4421      	add	r1, r4
 8006d8c:	6011      	str	r1, [r2, #0]
 8006d8e:	e7d7      	b.n	8006d40 <_free_r+0x28>
 8006d90:	d902      	bls.n	8006d98 <_free_r+0x80>
 8006d92:	230c      	movs	r3, #12
 8006d94:	6003      	str	r3, [r0, #0]
 8006d96:	e7d3      	b.n	8006d40 <_free_r+0x28>
 8006d98:	6825      	ldr	r5, [r4, #0]
 8006d9a:	1961      	adds	r1, r4, r5
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	bf04      	itt	eq
 8006da0:	6819      	ldreq	r1, [r3, #0]
 8006da2:	685b      	ldreq	r3, [r3, #4]
 8006da4:	6063      	str	r3, [r4, #4]
 8006da6:	bf04      	itt	eq
 8006da8:	1949      	addeq	r1, r1, r5
 8006daa:	6021      	streq	r1, [r4, #0]
 8006dac:	6054      	str	r4, [r2, #4]
 8006dae:	e7c7      	b.n	8006d40 <_free_r+0x28>
 8006db0:	b003      	add	sp, #12
 8006db2:	bd30      	pop	{r4, r5, pc}
 8006db4:	200000a8 	.word	0x200000a8

08006db8 <_read_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4d07      	ldr	r5, [pc, #28]	; (8006dd8 <_read_r+0x20>)
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	4608      	mov	r0, r1
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	602a      	str	r2, [r5, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f7fb fa76 	bl	80022b8 <_read>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_read_r+0x1e>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_read_r+0x1e>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	20000318 	.word	0x20000318

08006ddc <_fstat_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d07      	ldr	r5, [pc, #28]	; (8006dfc <_fstat_r+0x20>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	4611      	mov	r1, r2
 8006de8:	602b      	str	r3, [r5, #0]
 8006dea:	f7fb faaa 	bl	8002342 <_fstat>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	d102      	bne.n	8006df8 <_fstat_r+0x1c>
 8006df2:	682b      	ldr	r3, [r5, #0]
 8006df4:	b103      	cbz	r3, 8006df8 <_fstat_r+0x1c>
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	bd38      	pop	{r3, r4, r5, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000318 	.word	0x20000318

08006e00 <_isatty_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4d06      	ldr	r5, [pc, #24]	; (8006e1c <_isatty_r+0x1c>)
 8006e04:	2300      	movs	r3, #0
 8006e06:	4604      	mov	r4, r0
 8006e08:	4608      	mov	r0, r1
 8006e0a:	602b      	str	r3, [r5, #0]
 8006e0c:	f7fb faa9 	bl	8002362 <_isatty>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_isatty_r+0x1a>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_isatty_r+0x1a>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	20000318 	.word	0x20000318

08006e20 <_init>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr

08006e2c <_fini>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	bf00      	nop
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr
